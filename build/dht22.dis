
/Users/davide/Documents/NQM_WORK/Agritech/stm32f4/build/dht22.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <SysTick_Handler>:
uint8_t CMD,testID;


volatile uint32_t usTicks; /* counts 1us timeTicks       */
void SysTick_Handler(void) {
	timer_decrement();
 8000188:	f000 bbe4 	b.w	8000954 <timer_decrement>

0800018c <Delay>:
}

//  Delays number of Systicks (happens every 1 ms)
void Delay(__IO uint32_t dlyTicks){                                              
 800018c:	b082      	sub	sp, #8
  uint32_t curTicks = usTicks;
 800018e:	4905      	ldr	r1, [pc, #20]	; (80001a4 <Delay+0x18>)
void SysTick_Handler(void) {
	timer_decrement();
}

//  Delays number of Systicks (happens every 1 ms)
void Delay(__IO uint32_t dlyTicks){                                              
 8000190:	9001      	str	r0, [sp, #4]
  uint32_t curTicks = usTicks;
 8000192:	6808      	ldr	r0, [r1, #0]
  while ((usTicks - curTicks) < dlyTicks);
 8000194:	680a      	ldr	r2, [r1, #0]
 8000196:	9b01      	ldr	r3, [sp, #4]
 8000198:	1a12      	subs	r2, r2, r0
 800019a:	429a      	cmp	r2, r3
 800019c:	d3fa      	bcc.n	8000194 <Delay+0x8>
}
 800019e:	b002      	add	sp, #8
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000118 	.word	0x20000118

080001a8 <setSysTick>:

void setSysTick(){
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000000)) {
 80001a8:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <setSysTick+0x34>)
 80001aa:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <setSysTick+0x38>)
 80001ac:	6812      	ldr	r2, [r2, #0]
 80001ae:	fba3 1202 	umull	r1, r2, r3, r2
 80001b2:	0c92      	lsrs	r2, r2, #18
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80001b4:	3a01      	subs	r2, #1
 80001b6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
void Delay(__IO uint32_t dlyTicks){                                              
  uint32_t curTicks = usTicks;
  while ((usTicks - curTicks) < dlyTicks);
}

void setSysTick(){
 80001ba:	b410      	push	{r4}
 80001bc:	d20c      	bcs.n	80001d8 <setSysTick+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001be:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <setSysTick+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <setSysTick+0x40>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001c2:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001c4:	24f0      	movs	r4, #240	; 0xf0
 80001c6:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ca:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001cc:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001ce:	6099      	str	r1, [r3, #8]
	// ---------- SysTick timer (1ms) -------- //
	if (SysTick_Config(SystemCoreClock / 1000000)) {
		// Capture error
		while (1){};
	}
}
 80001d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	4770      	bx	lr
 80001d8:	e7fe      	b.n	80001d8 <setSysTick+0x30>
 80001da:	bf00      	nop
 80001dc:	20000010 	.word	0x20000010
 80001e0:	431bde83 	.word	0x431bde83
 80001e4:	e000e010 	.word	0xe000e010
 80001e8:	e000ed00 	.word	0xe000ed00

080001ec <LED_setup>:
void LED_setup(void){
 80001ec:	b500      	push	{lr}
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80001ee:	2101      	movs	r1, #1
	if (SysTick_Config(SystemCoreClock / 1000000)) {
		// Capture error
		while (1){};
	}
}
void LED_setup(void){
 80001f0:	b083      	sub	sp, #12
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80001f2:	2004      	movs	r0, #4
 80001f4:	f000 feb4 	bl	8000f60 <RCC_AHB1PeriphClockCmd>

    GPIO_InitTypeDef LEDgpio;
    GPIO_StructInit(&LEDgpio);
 80001f8:	4668      	mov	r0, sp
 80001fa:	f001 f8af 	bl	800135c <GPIO_StructInit>
    LEDgpio.GPIO_Mode = GPIO_Mode_OUT;
 80001fe:	2201      	movs	r2, #1
    LEDgpio.GPIO_Pin = LEDS;
 8000200:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    GPIO_Init(GPIOC, &LEDgpio);
 8000204:	4669      	mov	r1, sp
 8000206:	4804      	ldr	r0, [pc, #16]	; (8000218 <LED_setup+0x2c>)
void LED_setup(void){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

    GPIO_InitTypeDef LEDgpio;
    GPIO_StructInit(&LEDgpio);
    LEDgpio.GPIO_Mode = GPIO_Mode_OUT;
 8000208:	f88d 2004 	strb.w	r2, [sp, #4]
    LEDgpio.GPIO_Pin = LEDS;
 800020c:	9300      	str	r3, [sp, #0]
    GPIO_Init(GPIOC, &LEDgpio);
 800020e:	f001 f847 	bl	80012a0 <GPIO_Init>
}
 8000212:	b003      	add	sp, #12
 8000214:	f85d fb04 	ldr.w	pc, [sp], #4
 8000218:	40020800 	.word	0x40020800

0800021c <setup_Periph>:
void setup_Periph(){
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Enable the APB1 periph clock for USART3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 800021e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    GPIO_StructInit(&LEDgpio);
    LEDgpio.GPIO_Mode = GPIO_Mode_OUT;
    LEDgpio.GPIO_Pin = LEDS;
    GPIO_Init(GPIOC, &LEDgpio);
}
void setup_Periph(){
 8000222:	b089      	sub	sp, #36	; 0x24
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000224:	4f27      	ldr	r7, [pc, #156]	; (80002c4 <setup_Periph+0xa8>)
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART3, &USART_InitStructure);
 8000226:	4e28      	ldr	r6, [pc, #160]	; (80002c8 <setup_Periph+0xac>)
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	// Enable the APB1 periph clock for USART3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000228:	2101      	movs	r1, #1
 800022a:	f000 febd 	bl	8000fa8 <RCC_APB1PeriphClockCmd>
	// Enable the GPIOA clock, used by pins PA2, PA3
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800022e:	2002      	movs	r0, #2
 8000230:	2101      	movs	r1, #1
 8000232:	f000 fe95 	bl	8000f60 <RCC_AHB1PeriphClockCmd>

	// Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000236:	2400      	movs	r4, #0
	// Enable the GPIOA clock, used by pins PA2, PA3
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	// Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000238:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800023a:	2501      	movs	r5, #1
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800023c:	4638      	mov	r0, r7
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
	// Enable the GPIOA clock, used by pins PA2, PA3
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	// Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 800023e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000242:	a902      	add	r1, sp, #8
	// Enable the GPIOA clock, used by pins PA2, PA3
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	// Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000244:	f88d 300c 	strb.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000248:	f88d 300d 	strb.w	r3, [sp, #13]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
	// Enable the GPIOA clock, used by pins PA2, PA3
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	// Setup the GPIO pins for Tx and Rx
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 800024c:	9202      	str	r2, [sp, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800024e:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000252:	f88d 500f 	strb.w	r5, [sp, #15]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000256:	f001 f823 	bl	80012a0 <GPIO_Init>

	// Connect PA2 and PA3 with the USART2 Alternate Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
 800025a:	4638      	mov	r0, r7
 800025c:	210a      	movs	r1, #10
 800025e:	2207      	movs	r2, #7
 8000260:	f001 f8bc 	bl	80013dc <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
 8000264:	4638      	mov	r0, r7
 8000266:	210b      	movs	r1, #11
 8000268:	2207      	movs	r2, #7
 800026a:	f001 f8b7 	bl	80013dc <GPIO_PinAFConfig>
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800026e:	230c      	movs	r3, #12
	USART_Init(USART3, &USART_InitStructure);
 8000270:	4630      	mov	r0, r6

	// Connect PA2 and PA3 with the USART2 Alternate Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);

	USART_InitStructure.USART_BaudRate = 9600;
 8000272:	f44f 5216 	mov.w	r2, #9600	; 0x2580
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART3, &USART_InitStructure);
 8000276:	a904      	add	r1, sp, #16
	USART_InitStructure.USART_BaudRate = 9600;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000278:	f8ad 301a 	strh.w	r3, [sp, #26]

	// Connect PA2 and PA3 with the USART2 Alternate Function
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);

	USART_InitStructure.USART_BaudRate = 9600;
 800027c:	9204      	str	r2, [sp, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800027e:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000282:	f8ad 4016 	strh.w	r4, [sp, #22]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000286:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800028a:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART3, &USART_InitStructure);
 800028e:	f001 f93f 	bl	8001510 <USART_Init>

	/* Enable the USART2 receive interrupt and configure
		the interrupt controller to jump to USART2_IRQHandler()
		if the USART2 receive interrupt occurs
	*/
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8000292:	462a      	mov	r2, r5
 8000294:	4630      	mov	r0, r6
 8000296:	f240 5125 	movw	r1, #1317	; 0x525
 800029a:	f001 fa99 	bl	80017d0 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800029e:	2327      	movs	r3, #39	; 0x27
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80002a0:	a801      	add	r0, sp, #4
		the interrupt controller to jump to USART2_IRQHandler()
		if the USART2 receive interrupt occurs
	*/
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 80002a2:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80002a6:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80002aa:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80002ae:	f88d 5007 	strb.w	r5, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80002b2:	f000 fc4b 	bl	8000b4c <NVIC_Init>

	// Finally enable the USART2 peripheral
	USART_Cmd(USART3, ENABLE);
 80002b6:	4630      	mov	r0, r6
 80002b8:	4629      	mov	r1, r5
 80002ba:	f001 f9af 	bl	800161c <USART_Cmd>
}
 80002be:	b009      	add	sp, #36	; 0x24
 80002c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40020400 	.word	0x40020400
 80002c8:	40004800 	.word	0x40004800

080002cc <USART_puts>:

void USART_puts(USART_TypeDef *USARTx, volatile char *str){
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	460d      	mov	r5, r1
 80002d0:	4604      	mov	r4, r0
	GPIO_SetBits(GPIOC,GPIO_Pin_15);
 80002d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d6:	480e      	ldr	r0, [pc, #56]	; (8000310 <USART_puts+0x44>)
 80002d8:	f001 f870 	bl	80013bc <GPIO_SetBits>
	while(*str){
 80002dc:	782b      	ldrb	r3, [r5, #0]
 80002de:	b183      	cbz	r3, 8000302 <USART_puts+0x36>
		// Wait for the TC (Transmission Complete) Flag to be set
		// while(!(USARTx->SR & 0x040));
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80002e0:	4620      	mov	r0, r4
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	f001 fa92 	bl	800180c <USART_GetFlagStatus>
 80002e8:	2800      	cmp	r0, #0
 80002ea:	d0f9      	beq.n	80002e0 <USART_puts+0x14>
		USART_SendData(USARTx, *str);
 80002ec:	462e      	mov	r6, r5
 80002ee:	4620      	mov	r0, r4
 80002f0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80002f4:	f001 f9c6 	bl	8001684 <USART_SendData>
		
		*str++;
 80002f8:	782b      	ldrb	r3, [r5, #0]
	USART_Cmd(USART3, ENABLE);
}

void USART_puts(USART_TypeDef *USARTx, volatile char *str){
	GPIO_SetBits(GPIOC,GPIO_Pin_15);
	while(*str){
 80002fa:	786b      	ldrb	r3, [r5, #1]
 80002fc:	b10b      	cbz	r3, 8000302 <USART_puts+0x36>
		// Wait for the TC (Transmission Complete) Flag to be set
		// while(!(USARTx->SR & 0x040));
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
		USART_SendData(USARTx, *str);
		
		*str++;
 80002fe:	4635      	mov	r5, r6
 8000300:	e7ee      	b.n	80002e0 <USART_puts+0x14>
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_15);
 8000302:	4803      	ldr	r0, [pc, #12]	; (8000310 <USART_puts+0x44>)
 8000304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
}
 8000308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
		USART_SendData(USARTx, *str);
		
		*str++;
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_15);
 800030c:	f001 b858 	b.w	80013c0 <GPIO_ResetBits>
 8000310:	40020800 	.word	0x40020800

08000314 <print_fun>:
}
int print_fun(const char *fmt, ...)
{
 8000314:	b40f      	push	{r0, r1, r2, r3}
 8000316:	b510      	push	{r4, lr}
 8000318:	b0c2      	sub	sp, #264	; 0x108
 800031a:	aa44      	add	r2, sp, #272	; 0x110
    char textbuf[255];
    va_list argp;

    va_start( argp, fmt );

    ret = vsprintf( textbuf, fmt, argp );
 800031c:	a802      	add	r0, sp, #8
		*str++;
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_15);
}
int print_fun(const char *fmt, ...)
{
 800031e:	f852 1b04 	ldr.w	r1, [r2], #4
    int ret;
    char textbuf[255];
    va_list argp;

    va_start( argp, fmt );
 8000322:	9201      	str	r2, [sp, #4]

    ret = vsprintf( textbuf, fmt, argp );
 8000324:	f001 fdca 	bl	8001ebc <vsiprintf>
    USART_puts(USART3, textbuf);
 8000328:	a902      	add	r1, sp, #8
    char textbuf[255];
    va_list argp;

    va_start( argp, fmt );

    ret = vsprintf( textbuf, fmt, argp );
 800032a:	4604      	mov	r4, r0
    USART_puts(USART3, textbuf);
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <print_fun+0x2c>)
 800032e:	f7ff ffcd 	bl	80002cc <USART_puts>

    va_end( argp );
    return ret;
}
 8000332:	4620      	mov	r0, r4
 8000334:	b042      	add	sp, #264	; 0x108
 8000336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800033a:	b004      	add	sp, #16
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40004800 	.word	0x40004800

08000344 <loop_fun>:
void loop_fun(void){
 8000344:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	uint32_t crc32;
	uint16_t crc16;

	delay_us(2500000);
 8000346:	4822      	ldr	r0, [pc, #136]	; (80003d0 <loop_fun+0x8c>)
    USART_puts(USART3, textbuf);

    va_end( argp );
    return ret;
}
void loop_fun(void){
 8000348:	b0aa      	sub	sp, #168	; 0xa8
	uint8_t i;
	uint32_t crc32;
	uint16_t crc16;

	delay_us(2500000);
 800034a:	f000 faf7 	bl	800093c <delay_us>
	uint8_t datum[165] = {0};
 800034e:	22a5      	movs	r2, #165	; 0xa5
 8000350:	2100      	movs	r1, #0
 8000352:	4668      	mov	r0, sp
 8000354:	f001 fac8 	bl	80018e8 <memset>
	* Test Run
	*/
	/*for(i=0;i<165;i++){
		datum[i] = i;
	}*/
	readAll(datum);
 8000358:	4668      	mov	r0, sp
 800035a:	f000 fb83 	bl	8000a64 <readAll>
	crc16 = crc16_ccitt(datum, 165);
 800035e:	21a5      	movs	r1, #165	; 0xa5
 8000360:	4668      	mov	r0, sp
 8000362:	f000 fbcf 	bl	8000b04 <crc16_ccitt>
 8000366:	4606      	mov	r6, r0
	/*
	read all the sensors data
	*/
	
	
	delay_us(2000);
 8000368:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800036c:	f000 fae6 	bl	800093c <delay_us>
	print_fun("%04x",0xAA55);
 8000370:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8000374:	4817      	ldr	r0, [pc, #92]	; (80003d4 <loop_fun+0x90>)
 8000376:	f7ff ffcd 	bl	8000314 <print_fun>
	print_fun(",");
 800037a:	4817      	ldr	r0, [pc, #92]	; (80003d8 <loop_fun+0x94>)
 800037c:	f7ff ffca 	bl	8000314 <print_fun>
 8000380:	f10d 34ff 	add.w	r4, sp, #4294967295	; 0xffffffff
 8000384:	ad29      	add	r5, sp, #164	; 0xa4
	for(i=0;i<165;i++){
		print_fun("%d",datum[i]);
 8000386:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800038a:	4814      	ldr	r0, [pc, #80]	; (80003dc <loop_fun+0x98>)
 800038c:	f7ff ffc2 	bl	8000314 <print_fun>
		print_fun(",");
 8000390:	4811      	ldr	r0, [pc, #68]	; (80003d8 <loop_fun+0x94>)
 8000392:	f7ff ffbf 	bl	8000314 <print_fun>
	
	
	delay_us(2000);
	print_fun("%04x",0xAA55);
	print_fun(",");
	for(i=0;i<165;i++){
 8000396:	42ac      	cmp	r4, r5
 8000398:	d1f5      	bne.n	8000386 <loop_fun+0x42>
		print_fun("%d",datum[i]);
		print_fun(",");
	} 
	print_fun("%d",i);
 800039a:	21a5      	movs	r1, #165	; 0xa5
 800039c:	480f      	ldr	r0, [pc, #60]	; (80003dc <loop_fun+0x98>)
 800039e:	f7ff ffb9 	bl	8000314 <print_fun>
	print_fun(",");
 80003a2:	480d      	ldr	r0, [pc, #52]	; (80003d8 <loop_fun+0x94>)
 80003a4:	f7ff ffb6 	bl	8000314 <print_fun>
	print_fun("%04x",crc16);
 80003a8:	4631      	mov	r1, r6
 80003aa:	480a      	ldr	r0, [pc, #40]	; (80003d4 <loop_fun+0x90>)
 80003ac:	f7ff ffb2 	bl	8000314 <print_fun>
	print_fun(",");
 80003b0:	4809      	ldr	r0, [pc, #36]	; (80003d8 <loop_fun+0x94>)
 80003b2:	f7ff ffaf 	bl	8000314 <print_fun>
	print_fun("%04x",0xAA55);
 80003b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <loop_fun+0x90>)
 80003bc:	f7ff ffaa 	bl	8000314 <print_fun>
	print_fun("\n\r");
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <loop_fun+0x9c>)
 80003c2:	f7ff ffa7 	bl	8000314 <print_fun>
	delay_us(2000000);
 80003c6:	4807      	ldr	r0, [pc, #28]	; (80003e4 <loop_fun+0xa0>)
 80003c8:	f000 fab8 	bl	800093c <delay_us>
}
 80003cc:	b02a      	add	sp, #168	; 0xa8
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	002625a0 	.word	0x002625a0
 80003d4:	08002c78 	.word	0x08002c78
 80003d8:	08002c80 	.word	0x08002c80
 80003dc:	08002c84 	.word	0x08002c84
 80003e0:	08002ca0 	.word	0x08002ca0
 80003e4:	001e8480 	.word	0x001e8480

080003e8 <stop_fun>:
void stop_fun(void){
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop

080003ec <test>:
	while(CMD <0);
}
void test(uint8_t sensorID){
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4604      	mov	r4, r0
 80003f0:	b082      	sub	sp, #8
	uint8_t data[5];
	uint8_t ans,i;
	uint16_t crc16;
	delay_us(4000000);
 80003f2:	4820      	ldr	r0, [pc, #128]	; (8000474 <test+0x88>)
 80003f4:	f000 faa2 	bl	800093c <delay_us>
	ans = readOne(sensorID,&data[0]);
 80003f8:	4620      	mov	r0, r4
 80003fa:	4669      	mov	r1, sp
 80003fc:	f000 fb22 	bl	8000a44 <readOne>
	// for(i=0;i<5;i++){
	// 	data[i] = i;
	// }
	crc16 = crc16_ccitt(data,5);
 8000400:	2105      	movs	r1, #5
 8000402:	4668      	mov	r0, sp
 8000404:	f000 fb7e 	bl	8000b04 <crc16_ccitt>
	print_fun("%04x",0xAA55);
 8000408:	f64a 2155 	movw	r1, #43605	; 0xaa55
	delay_us(4000000);
	ans = readOne(sensorID,&data[0]);
	// for(i=0;i<5;i++){
	// 	data[i] = i;
	// }
	crc16 = crc16_ccitt(data,5);
 800040c:	4606      	mov	r6, r0
	print_fun("%04x",0xAA55);
 800040e:	481a      	ldr	r0, [pc, #104]	; (8000478 <test+0x8c>)
 8000410:	f7ff ff80 	bl	8000314 <print_fun>
	print_fun(",");
 8000414:	4819      	ldr	r0, [pc, #100]	; (800047c <test+0x90>)
 8000416:	f7ff ff7d 	bl	8000314 <print_fun>
	print_fun("%d",sensorID);
 800041a:	4621      	mov	r1, r4
 800041c:	4818      	ldr	r0, [pc, #96]	; (8000480 <test+0x94>)
 800041e:	f7ff ff79 	bl	8000314 <print_fun>
	print_fun(",");
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <test+0x90>)
 8000424:	f7ff ff76 	bl	8000314 <print_fun>
 8000428:	f10d 34ff 	add.w	r4, sp, #4294967295	; 0xffffffff
 800042c:	ad01      	add	r5, sp, #4
	//if(ans ==1){
		for(i=0;i<5;i++){
			print_fun("%d",data[i]);
 800042e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000432:	4813      	ldr	r0, [pc, #76]	; (8000480 <test+0x94>)
 8000434:	f7ff ff6e 	bl	8000314 <print_fun>
			print_fun(",");
 8000438:	4810      	ldr	r0, [pc, #64]	; (800047c <test+0x90>)
 800043a:	f7ff ff6b 	bl	8000314 <print_fun>
	print_fun("%04x",0xAA55);
	print_fun(",");
	print_fun("%d",sensorID);
	print_fun(",");
	//if(ans ==1){
		for(i=0;i<5;i++){
 800043e:	42ac      	cmp	r4, r5
 8000440:	d1f5      	bne.n	800042e <test+0x42>
			print_fun("%d",data[i]);
			print_fun(",");
		}
		print_fun("%d",i);
 8000442:	2105      	movs	r1, #5
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <test+0x94>)
 8000446:	f7ff ff65 	bl	8000314 <print_fun>
		print_fun(",");
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <test+0x90>)
 800044c:	f7ff ff62 	bl	8000314 <print_fun>
		print_fun("%04x",crc16);
 8000450:	4631      	mov	r1, r6
 8000452:	4809      	ldr	r0, [pc, #36]	; (8000478 <test+0x8c>)
 8000454:	f7ff ff5e 	bl	8000314 <print_fun>
		print_fun(",");
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <test+0x90>)
 800045a:	f7ff ff5b 	bl	8000314 <print_fun>
	//}
	/*else{
		print_fun("%04x",0xFFFF);
		print_fun(",");
	}*/
	print_fun("%04x",0xAA55);
 800045e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <test+0x8c>)
 8000464:	f7ff ff56 	bl	8000314 <print_fun>
	print_fun("\n\r");
 8000468:	4806      	ldr	r0, [pc, #24]	; (8000484 <test+0x98>)
 800046a:	f7ff ff53 	bl	8000314 <print_fun>
}
 800046e:	b002      	add	sp, #8
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	bf00      	nop
 8000474:	003d0900 	.word	0x003d0900
 8000478:	08002c78 	.word	0x08002c78
 800047c:	08002c80 	.word	0x08002c80
 8000480:	08002c84 	.word	0x08002c84
 8000484:	08002ca0 	.word	0x08002ca0

08000488 <USART3_IRQHandler>:
	}

	return 0;
}

void USART3_IRQHandler(void){
 8000488:	b510      	push	{r4, lr}
	
	// check if the USART1 receive interrupt flag was set

	if( USART_GetITStatus(USART3, USART_IT_RXNE) ){
 800048a:	4c26      	ldr	r4, [pc, #152]	; (8000524 <USART3_IRQHandler+0x9c>)
 800048c:	f240 5125 	movw	r1, #1317	; 0x525
 8000490:	4620      	mov	r0, r4
 8000492:	f001 f9c5 	bl	8001820 <USART_GetITStatus>
 8000496:	b930      	cbnz	r0, 80004a6 <USART3_IRQHandler+0x1e>
				CMD = -1;
			}
		}
		 
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_14);
 8000498:	4823      	ldr	r0, [pc, #140]	; (8000528 <USART3_IRQHandler+0xa0>)
 800049a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
}
 800049e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				CMD = -1;
			}
		}
		 
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_14);
 80004a2:	f000 bf8d 	b.w	80013c0 <GPIO_ResetBits>
void USART3_IRQHandler(void){
	
	// check if the USART1 receive interrupt flag was set

	if( USART_GetITStatus(USART3, USART_IT_RXNE) ){
		GPIO_SetBits(GPIOC,GPIO_Pin_14);
 80004a6:	4820      	ldr	r0, [pc, #128]	; (8000528 <USART3_IRQHandler+0xa0>)
 80004a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ac:	f000 ff86 	bl	80013bc <GPIO_SetBits>
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART3->DR; // the character from the USART1 data register is saved in t
 80004b0:	88a3      	ldrh	r3, [r4, #4]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
 80004b2:	4a1e      	ldr	r2, [pc, #120]	; (800052c <USART3_IRQHandler+0xa4>)

	if( USART_GetITStatus(USART3, USART_IT_RXNE) ){
		GPIO_SetBits(GPIOC,GPIO_Pin_14);
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART3->DR; // the character from the USART1 data register is saved in t
 80004b4:	b2db      	uxtb	r3, r3
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
 80004b6:	2b0a      	cmp	r3, #10
 80004b8:	d002      	beq.n	80004c0 <USART3_IRQHandler+0x38>
 80004ba:	7811      	ldrb	r1, [r2, #0]
 80004bc:	2904      	cmp	r1, #4
 80004be:	d90f      	bls.n	80004e0 <USART3_IRQHandler+0x58>
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			//USART_puts(USART3, received_string);
			if(received_string[0] == '1'){
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <USART3_IRQHandler+0xa8>)
 80004c2:	7819      	ldrb	r1, [r3, #0]
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 80004c4:	2000      	movs	r0, #0
			//USART_puts(USART3, received_string);
			if(received_string[0] == '1'){
 80004c6:	2931      	cmp	r1, #49	; 0x31
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 80004c8:	7010      	strb	r0, [r2, #0]
			//USART_puts(USART3, received_string);
			if(received_string[0] == '1'){
 80004ca:	d026      	beq.n	800051a <USART3_IRQHandler+0x92>
				CMD = 1;
				//print_fun("cmd is %d\n",CMD);
				
			}
			else if(received_string[0] == '2' && received_string[1] == '+'){
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	2a32      	cmp	r2, #50	; 0x32
 80004d0:	d011      	beq.n	80004f6 <USART3_IRQHandler+0x6e>
				//testID = received_string[2];
				//print_fun("[2]=%d,[3]=%d\n",received_string[2],received_string[3]);
				testID = (int)(received_string[2]-48) * 10 + (int)(received_string[3]-48);
				//print_fun("testid id %d\n",testID);
			}
			else if(received_string[0] == '3'){
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b33      	cmp	r3, #51	; 0x33
 80004d6:	d1df      	bne.n	8000498 <USART3_IRQHandler+0x10>
				CMD = -1;
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <USART3_IRQHandler+0xac>)
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	e7db      	b.n	8000498 <USART3_IRQHandler+0x10>
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
			received_string[cnt] = t;
 80004e0:	4c13      	ldr	r4, [pc, #76]	; (8000530 <USART3_IRQHandler+0xa8>)
			cnt++;
 80004e2:	1c48      	adds	r0, r1, #1
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
			received_string[cnt] = t;
 80004e4:	5463      	strb	r3, [r4, r1]
			cnt++;
 80004e6:	7010      	strb	r0, [r2, #0]
				CMD = -1;
			}
		}
		 
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_14);
 80004e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ec:	480e      	ldr	r0, [pc, #56]	; (8000528 <USART3_IRQHandler+0xa0>)
}
 80004ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				CMD = -1;
			}
		}
		 
	}
	GPIO_ResetBits(GPIOC,GPIO_Pin_14);
 80004f2:	f000 bf65 	b.w	80013c0 <GPIO_ResetBits>
			if(received_string[0] == '1'){
				CMD = 1;
				//print_fun("cmd is %d\n",CMD);
				
			}
			else if(received_string[0] == '2' && received_string[1] == '+'){
 80004f6:	785a      	ldrb	r2, [r3, #1]
 80004f8:	2a2b      	cmp	r2, #43	; 0x2b
 80004fa:	d1ea      	bne.n	80004d2 <USART3_IRQHandler+0x4a>
				testID=0;
				CMD = 2;
				//testID = received_string[2];
				//print_fun("[2]=%d,[3]=%d\n",received_string[2],received_string[3]);
				testID = (int)(received_string[2]-48) * 10 + (int)(received_string[3]-48);
 80004fc:	789c      	ldrb	r4, [r3, #2]
 80004fe:	78d8      	ldrb	r0, [r3, #3]
 8000500:	490d      	ldr	r1, [pc, #52]	; (8000538 <USART3_IRQHandler+0xb0>)
				//print_fun("cmd is %d\n",CMD);
				
			}
			else if(received_string[0] == '2' && received_string[1] == '+'){
				testID=0;
				CMD = 2;
 8000502:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <USART3_IRQHandler+0xac>)
				//testID = received_string[2];
				//print_fun("[2]=%d,[3]=%d\n",received_string[2],received_string[3]);
				testID = (int)(received_string[2]-48) * 10 + (int)(received_string[3]-48);
 8000504:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800050c:	3830      	subs	r0, #48	; 0x30
 800050e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				//print_fun("cmd is %d\n",CMD);
				
			}
			else if(received_string[0] == '2' && received_string[1] == '+'){
				testID=0;
				CMD = 2;
 8000512:	2302      	movs	r3, #2
				//testID = received_string[2];
				//print_fun("[2]=%d,[3]=%d\n",received_string[2],received_string[3]);
				testID = (int)(received_string[2]-48) * 10 + (int)(received_string[3]-48);
 8000514:	7008      	strb	r0, [r1, #0]
				//print_fun("cmd is %d\n",CMD);
				
			}
			else if(received_string[0] == '2' && received_string[1] == '+'){
				testID=0;
				CMD = 2;
 8000516:	7013      	strb	r3, [r2, #0]
				//testID = received_string[2];
				//print_fun("[2]=%d,[3]=%d\n",received_string[2],received_string[3]);
				testID = (int)(received_string[2]-48) * 10 + (int)(received_string[3]-48);
 8000518:	e7be      	b.n	8000498 <USART3_IRQHandler+0x10>
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			//USART_puts(USART3, received_string);
			if(received_string[0] == '1'){
				CMD = 1;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <USART3_IRQHandler+0xac>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e7ba      	b.n	8000498 <USART3_IRQHandler+0x10>
 8000522:	bf00      	nop
 8000524:	40004800 	.word	0x40004800
 8000528:	40020800 	.word	0x40020800
 800052c:	200000f0 	.word	0x200000f0
 8000530:	20000130 	.word	0x20000130
 8000534:	2000011d 	.word	0x2000011d
 8000538:	2000011c 	.word	0x2000011c

0800053c <Default_Handler>:
// This is the code that gets called when the processor receives an unexpected
// interrupt.	This simply enters an infinite loop, preserving the system state
// for examination by a debugger.
//
//*****************************************************************************
void Default_Handler(void) {
 800053c:	e7fe      	b.n	800053c <Default_Handler>
 800053e:	bf00      	nop

08000540 <Reset_Handler>:
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 8000540:	4668      	mov	r0, sp
 8000542:	f020 0107 	bic.w	r1, r0, #7
 8000546:	468d      	mov	sp, r1
 8000548:	b519      	push	{r0, r3, r4, lr}
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 800054a:	4913      	ldr	r1, [pc, #76]	; (8000598 <Reset_Handler+0x58>)
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <Reset_Handler+0x5c>)
 800054e:	4299      	cmp	r1, r3
 8000550:	d20b      	bcs.n	800056a <Reset_Handler+0x2a>
 8000552:	43c8      	mvns	r0, r1
 8000554:	4418      	add	r0, r3
 8000556:	f020 0003 	bic.w	r0, r0, #3
 800055a:	4c11      	ldr	r4, [pc, #68]	; (80005a0 <Reset_Handler+0x60>)
 800055c:	3004      	adds	r0, #4
 800055e:	2300      	movs	r3, #0
	{
		*(pulDest++) = *(pulSrc++);
 8000560:	58e2      	ldr	r2, [r4, r3]
 8000562:	50ca      	str	r2, [r1, r3]
 8000564:	3304      	adds	r3, #4
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000566:	4283      	cmp	r3, r0
 8000568:	d1fa      	bne.n	8000560 <Reset_Handler+0x20>


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <Reset_Handler+0x64>)
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <Reset_Handler+0x68>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d20a      	bcs.n	8000588 <Reset_Handler+0x48>
 8000572:	43d9      	mvns	r1, r3
 8000574:	4411      	add	r1, r2
 8000576:	f021 0103 	bic.w	r1, r1, #3
 800057a:	4419      	add	r1, r3
	{
		*(pulDest++) = 0;
 800057c:	2200      	movs	r2, #0
 800057e:	3b04      	subs	r3, #4
 8000580:	f843 2f04 	str.w	r2, [r3, #4]!


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 8000584:	428b      	cmp	r3, r1
 8000586:	d1fb      	bne.n	8000580 <Reset_Handler+0x40>
	//
	//	Call IEC60335 CPU register tests POST
	//
//	__ASM volatile ("bl _CPUregTestPOST \t\n");

	SystemInit();
 8000588:	f000 f810 	bl	80005ac <SystemInit>

	//
	// Call the application's entry point.
	//
	main();
 800058c:	f001 f976 	bl	800187c <main>
}
 8000590:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 8000594:	4685      	mov	sp, r0
 8000596:	4770      	bx	lr
 8000598:	20000000 	.word	0x20000000
 800059c:	200000f0 	.word	0x200000f0
 80005a0:	08002d50 	.word	0x08002d50
 80005a4:	200000f0 	.word	0x200000f0
 80005a8:	20000148 	.word	0x20000148

080005ac <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005ac:	4b35      	ldr	r3, [pc, #212]	; (8000684 <SystemInit+0xd8>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005ae:	4836      	ldr	r0, [pc, #216]	; (8000688 <SystemInit+0xdc>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005b0:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005b2:	2200      	movs	r2, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005b4:	f041 0101 	orr.w	r1, r1, #1
 80005b8:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005ba:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005bc:	6819      	ldr	r1, [r3, #0]
 80005be:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80005c2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80005c6:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005c8:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ca:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005cc:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005ce:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80005d2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005d4:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005e0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005e2:	461a      	mov	r2, r3
 80005e4:	e003      	b.n	80005ee <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005e6:	9b00      	ldr	r3, [sp, #0]
 80005e8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80005ec:	d009      	beq.n	8000602 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005ee:	6813      	ldr	r3, [r2, #0]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80005f6:	9b00      	ldr	r3, [sp, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005fc:	9b01      	ldr	r3, [sp, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f1      	beq.n	80005e6 <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <SystemInit+0xd8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800060a:	bf18      	it	ne
 800060c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800060e:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000610:	9b01      	ldr	r3, [sp, #4]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d005      	beq.n	8000622 <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <SystemInit+0xe0>)
 8000618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800061c:	609a      	str	r2, [r3, #8]
#endif
}
 800061e:	b002      	add	sp, #8
 8000620:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <SystemInit+0xd8>)
    PWR->CR |= PWR_CR_VOS;
 8000624:	4a1a      	ldr	r2, [pc, #104]	; (8000690 <SystemInit+0xe4>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000626:	6c18      	ldr	r0, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000628:	491a      	ldr	r1, [pc, #104]	; (8000694 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800062a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800062e:	6418      	str	r0, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000630:	6810      	ldr	r0, [r2, #0]
 8000632:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000636:	6010      	str	r0, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000642:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800064a:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800064c:	6059      	str	r1, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000654:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000656:	4619      	mov	r1, r3
 8000658:	680b      	ldr	r3, [r1, #0]
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <SystemInit+0xd8>)
 800065c:	019b      	lsls	r3, r3, #6
 800065e:	d5fb      	bpl.n	8000658 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <SystemInit+0xec>)
 8000662:	f240 7105 	movw	r1, #1797	; 0x705
 8000666:	6019      	str	r1, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000668:	6893      	ldr	r3, [r2, #8]
 800066a:	f023 0303 	bic.w	r3, r3, #3
 800066e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000670:	6893      	ldr	r3, [r2, #8]
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000678:	6893      	ldr	r3, [r2, #8]
 800067a:	f003 030c 	and.w	r3, r3, #12
 800067e:	2b08      	cmp	r3, #8
 8000680:	d1fa      	bne.n	8000678 <SystemInit+0xcc>
 8000682:	e7c8      	b.n	8000616 <SystemInit+0x6a>
 8000684:	40023800 	.word	0x40023800
 8000688:	24003010 	.word	0x24003010
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	40007000 	.word	0x40007000
 8000694:	07405408 	.word	0x07405408
 8000698:	40023c00 	.word	0x40023c00

0800069c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <SystemCoreClockUpdate+0x58>)
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80006a4:	2a04      	cmp	r2, #4
 80006a6:	d023      	beq.n	80006f0 <SystemCoreClockUpdate+0x54>
 80006a8:	2a08      	cmp	r2, #8
 80006aa:	d009      	beq.n	80006c0 <SystemCoreClockUpdate+0x24>
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <SystemCoreClockUpdate+0x5c>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80006ae:	4911      	ldr	r1, [pc, #68]	; (80006f4 <SystemCoreClockUpdate+0x58>)
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <SystemCoreClockUpdate+0x60>)
 80006b2:	6889      	ldr	r1, [r1, #8]
 80006b4:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80006b8:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80006ba:	40ca      	lsrs	r2, r1
 80006bc:	611a      	str	r2, [r3, #16]
 80006be:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006c0:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006c2:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006c4:	685b      	ldr	r3, [r3, #4]
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 80006c6:	0242      	lsls	r2, r0, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006c8:	bf4c      	ite	mi
 80006ca:	4a0d      	ldrmi	r2, [pc, #52]	; (8000700 <SystemCoreClockUpdate+0x64>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006cc:	4a0a      	ldrpl	r2, [pc, #40]	; (80006f8 <SystemCoreClockUpdate+0x5c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006d2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80006d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80006da:	fb02 f203 	mul.w	r2, r2, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SystemCoreClockUpdate+0x58>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80006e6:	3301      	adds	r3, #1
 80006e8:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80006ea:	fbb2 f2f3 	udiv	r2, r2, r3
      break;
 80006ee:	e7de      	b.n	80006ae <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <SystemCoreClockUpdate+0x64>)
 80006f2:	e7dc      	b.n	80006ae <SystemCoreClockUpdate+0x12>
 80006f4:	40023800 	.word	0x40023800
 80006f8:	00f42400 	.word	0x00f42400
 80006fc:	20000000 	.word	0x20000000
 8000700:	007a1200 	.word	0x007a1200

08000704 <GPIOx_TypeDefInitialize>:
    /***************************************************/
}

/*RCC perpherals clock initialize*/
void GPIOx_TypeDefInitialize(GPIO_TypeDef *GPIOx){
	if(GPIOx == GPIOA){
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <GPIOx_TypeDefInitialize+0x48>)
 8000706:	4298      	cmp	r0, r3
 8000708:	d010      	beq.n	800072c <GPIOx_TypeDefInitialize+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	}
	else if(GPIOx == GPIOB){
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <GPIOx_TypeDefInitialize+0x4c>)
 800070c:	4298      	cmp	r0, r3
 800070e:	d011      	beq.n	8000734 <GPIOx_TypeDefInitialize+0x30>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	}
	else if(GPIOx == GPIOC){
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <GPIOx_TypeDefInitialize+0x50>)
 8000712:	4298      	cmp	r0, r3
 8000714:	d012      	beq.n	800073c <GPIOx_TypeDefInitialize+0x38>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	}
	else if(GPIOx == GPIOD){
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <GPIOx_TypeDefInitialize+0x54>)
 8000718:	4298      	cmp	r0, r3
 800071a:	d013      	beq.n	8000744 <GPIOx_TypeDefInitialize+0x40>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	}
	else if(GPIOx == GPIOE){
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <GPIOx_TypeDefInitialize+0x58>)
 800071e:	4298      	cmp	r0, r3
 8000720:	d000      	beq.n	8000724 <GPIOx_TypeDefInitialize+0x20>
 8000722:	4770      	bx	lr
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000724:	2010      	movs	r0, #16
 8000726:	2101      	movs	r1, #1
 8000728:	f000 bc1a 	b.w	8000f60 <RCC_AHB1PeriphClockCmd>
}

/*RCC perpherals clock initialize*/
void GPIOx_TypeDefInitialize(GPIO_TypeDef *GPIOx){
	if(GPIOx == GPIOA){
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800072c:	2001      	movs	r0, #1
 800072e:	4601      	mov	r1, r0
 8000730:	f000 bc16 	b.w	8000f60 <RCC_AHB1PeriphClockCmd>
	}
	else if(GPIOx == GPIOB){
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000734:	2002      	movs	r0, #2
 8000736:	2101      	movs	r1, #1
 8000738:	f000 bc12 	b.w	8000f60 <RCC_AHB1PeriphClockCmd>
	}
	else if(GPIOx == GPIOC){
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800073c:	2004      	movs	r0, #4
 800073e:	2101      	movs	r1, #1
 8000740:	f000 bc0e 	b.w	8000f60 <RCC_AHB1PeriphClockCmd>
	}
	else if(GPIOx == GPIOD){
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000744:	2008      	movs	r0, #8
 8000746:	2101      	movs	r1, #1
 8000748:	f000 bc0a 	b.w	8000f60 <RCC_AHB1PeriphClockCmd>
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40021000 	.word	0x40021000

08000760 <dht_init>:
#include "timer.h"


GPIO_InitTypeDef GPIO_DHT;
/*Initialization DHT22*/
void dht_init(GPIO_TypeDef *GPIOx, uint16_t DHT22_PIN){
 8000760:	b538      	push	{r3, r4, r5, lr}
 8000762:	460c      	mov	r4, r1
 8000764:	4605      	mov	r5, r0
	
	/*Enable perpherals clock for GPIO ports*/
	//GPIO_DeInit(GPIOx);

	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	GPIOx_TypeDefInitialize(GPIOx);
 8000766:	f7ff ffcd 	bl	8000704 <GPIOx_TypeDefInitialize>
	/***************************************************/
	
	/*Initialize DHT_Pin on GPIO ports*/
    GPIO_DHT.GPIO_Pin = DHT22_PIN;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <dht_init+0x24>)
    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
 800076c:	2201      	movs	r2, #1
    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
    GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOx, &GPIO_DHT);
 800076e:	4628      	mov	r0, r5
	/***************************************************/
	
	/*Initialize DHT_Pin on GPIO ports*/
    GPIO_DHT.GPIO_Pin = DHT22_PIN;
    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
 8000770:	2500      	movs	r5, #0
    GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOx, &GPIO_DHT);
 8000772:	4619      	mov	r1, r3
	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	GPIOx_TypeDefInitialize(GPIOx);
	/***************************************************/
	
	/*Initialize DHT_Pin on GPIO ports*/
    GPIO_DHT.GPIO_Pin = DHT22_PIN;
 8000774:	601c      	str	r4, [r3, #0]
    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
 8000776:	711d      	strb	r5, [r3, #4]
	GPIOx_TypeDefInitialize(GPIOx);
	/***************************************************/
	
	/*Initialize DHT_Pin on GPIO ports*/
    GPIO_DHT.GPIO_Pin = DHT22_PIN;
    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
 8000778:	715a      	strb	r2, [r3, #5]
    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
    GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
 800077a:	71da      	strb	r2, [r3, #7]
    GPIO_Init(GPIOx, &GPIO_DHT);
    /***************************************************/
}
 800077c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	/*Initialize DHT_Pin on GPIO ports*/
    GPIO_DHT.GPIO_Pin = DHT22_PIN;
    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
    GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOx, &GPIO_DHT);
 8000780:	f000 bd8e 	b.w	80012a0 <GPIO_Init>
 8000784:	2000013c 	.word	0x2000013c

08000788 <pinMode>:
	else if(GPIOx == GPIOE){
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	}
}
/*Setup the PinMode INPPUT/OUTPUT*/
void pinMode(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN, int pinmode,int PuPd){
 8000788:	b430      	push	{r4, r5}
	if(pinmode == 0){
 800078a:	b972      	cbnz	r2, 80007aa <pinMode+0x22>

		GPIO_DHT.GPIO_Pin = GPIO_PIN;
 800078c:	4c12      	ldr	r4, [pc, #72]	; (80007d8 <pinMode+0x50>)
	    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
 800078e:	2501      	movs	r5, #1
}
/*Setup the PinMode INPPUT/OUTPUT*/
void pinMode(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN, int pinmode,int PuPd){
	if(pinmode == 0){

		GPIO_DHT.GPIO_Pin = GPIO_PIN;
 8000790:	6021      	str	r1, [r4, #0]
	    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
	    GPIO_DHT.GPIO_Mode = GPIO_Mode_OUT;
	    GPIO_DHT.GPIO_OType = GPIO_OType_PP;
 8000792:	71a2      	strb	r2, [r4, #6]
/*Setup the PinMode INPPUT/OUTPUT*/
void pinMode(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN, int pinmode,int PuPd){
	if(pinmode == 0){

		GPIO_DHT.GPIO_Pin = GPIO_PIN;
	    GPIO_DHT.GPIO_Speed = GPIO_Speed_25MHz;
 8000794:	7165      	strb	r5, [r4, #5]
	    GPIO_DHT.GPIO_Mode = GPIO_Mode_OUT;
 8000796:	7125      	strb	r5, [r4, #4]
	    GPIO_DHT.GPIO_OType = GPIO_OType_PP;
	    if(PuPd == 0)
 8000798:	b1cb      	cbz	r3, 80007ce <pinMode+0x46>
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_NOPULL;
	    else if(PuPd == 1)
 800079a:	2b01      	cmp	r3, #1
 800079c:	d017      	beq.n	80007ce <pinMode+0x46>
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d015      	beq.n	80007ce <pinMode+0x46>
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <pinMode+0x50>)
}
 80007a4:	bc30      	pop	{r4, r5}
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
 80007a6:	f000 bd7b 	b.w	80012a0 <GPIO_Init>
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	else if(pinmode ==1){
 80007aa:	2a01      	cmp	r2, #1
 80007ac:	d1f9      	bne.n	80007a2 <pinMode+0x1a>
	    GPIO_DHT.GPIO_Pin = GPIO_PIN;
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <pinMode+0x50>)
	    GPIO_DHT.GPIO_Speed = GPIO_Speed_50MHz;
 80007b0:	2502      	movs	r5, #2
	    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
 80007b2:	2400      	movs	r4, #0
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	else if(pinmode ==1){
	    GPIO_DHT.GPIO_Pin = GPIO_PIN;
 80007b4:	6011      	str	r1, [r2, #0]
	    GPIO_DHT.GPIO_Speed = GPIO_Speed_50MHz;
 80007b6:	7155      	strb	r5, [r2, #5]
	    GPIO_DHT.GPIO_Mode = GPIO_Mode_IN;
 80007b8:	7114      	strb	r4, [r2, #4]

	   	if(PuPd == 0)
 80007ba:	b11b      	cbz	r3, 80007c4 <pinMode+0x3c>
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_NOPULL;
	    else if(PuPd == 1)
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d001      	beq.n	80007c4 <pinMode+0x3c>
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d1ee      	bne.n	80007a2 <pinMode+0x1a>
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
 80007c4:	4904      	ldr	r1, [pc, #16]	; (80007d8 <pinMode+0x50>)
	   	if(PuPd == 0)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_NOPULL;
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
 80007c6:	71d3      	strb	r3, [r2, #7]
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
}
 80007c8:	bc30      	pop	{r4, r5}
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
 80007ca:	f000 bd69 	b.w	80012a0 <GPIO_Init>
	    if(PuPd == 0)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_NOPULL;
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
 80007ce:	71e3      	strb	r3, [r4, #7]
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
 80007d0:	4901      	ldr	r1, [pc, #4]	; (80007d8 <pinMode+0x50>)
}
 80007d2:	bc30      	pop	{r4, r5}
	    else if(PuPd == 1)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_UP;
	    else if(PuPd == 2)
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
 80007d4:	f000 bd64 	b.w	80012a0 <GPIO_Init>
 80007d8:	2000013c 	.word	0x2000013c

080007dc <expectPulse>:
    else
    	return -1;
}

/*Read bit from GPIO pin*/
uint8_t expectPulse(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN, bool pulse){
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	4607      	mov	r7, r0
 80007e2:	460e      	mov	r6, r1
 80007e4:	4615      	mov	r5, r2
	uint8_t count = 0;
	while(GPIO_ReadInputDataBit(GPIOx,GPIO_PIN) == pulse){
 80007e6:	2400      	movs	r4, #0
 80007e8:	e003      	b.n	80007f2 <expectPulse+0x16>
	    	if(count > 80)
 80007ea:	2c52      	cmp	r4, #82	; 0x52
 80007ec:	d010      	beq.n	8000810 <expectPulse+0x34>
	    		return 0;
	    	count++;
	    	delay_us(1L);
 80007ee:	f000 f8a5 	bl	800093c <delay_us>
}

/*Read bit from GPIO pin*/
uint8_t expectPulse(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN, bool pulse){
	uint8_t count = 0;
	while(GPIO_ReadInputDataBit(GPIOx,GPIO_PIN) == pulse){
 80007f2:	4638      	mov	r0, r7
 80007f4:	4631      	mov	r1, r6
 80007f6:	f000 fdcd 	bl	8001394 <GPIO_ReadInputDataBit>
 80007fa:	42a8      	cmp	r0, r5
 80007fc:	fa5f f884 	uxtb.w	r8, r4
	    	if(count > 80)
	    		return 0;
	    	count++;
	    	delay_us(1L);
 8000800:	f04f 0001 	mov.w	r0, #1
 8000804:	f104 0401 	add.w	r4, r4, #1
}

/*Read bit from GPIO pin*/
uint8_t expectPulse(GPIO_TypeDef *GPIOx,uint16_t GPIO_PIN, bool pulse){
	uint8_t count = 0;
	while(GPIO_ReadInputDataBit(GPIOx,GPIO_PIN) == pulse){
 8000808:	d0ef      	beq.n	80007ea <expectPulse+0xe>
 800080a:	4640      	mov	r0, r8
 800080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    	if(count > 80)
	    		return 0;
 8000810:	2000      	movs	r0, #0
	    	count++;
	    	delay_us(1L);
	     }
	return count;
}
 8000812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000816:	bf00      	nop

08000818 <DHT_read>:
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
}
/*Read 80bits and form to 5 bytes data*/
uint8_t DHT_read(uint8_t *data,GPIO_TypeDef *GPIOx,uint16_t DHT22_PIN){
 8000818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800081c:	460e      	mov	r6, r1
 800081e:	b094      	sub	sp, #80	; 0x50
	uint8_t i,checksum;
	checksum = 0;
	GPIO_SetBits(GPIOx, DHT22_PIN);
 8000820:	4611      	mov	r1, r2
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
}
/*Read 80bits and form to 5 bytes data*/
uint8_t DHT_read(uint8_t *data,GPIO_TypeDef *GPIOx,uint16_t DHT22_PIN){
 8000822:	4680      	mov	r8, r0
	uint8_t i,checksum;
	checksum = 0;
	GPIO_SetBits(GPIOx, DHT22_PIN);
 8000824:	4630      	mov	r0, r6
	    	GPIO_DHT.GPIO_PuPd = GPIO_PuPd_DOWN;
	}
	GPIO_Init(GPIOx, &GPIO_DHT);
}
/*Read 80bits and form to 5 bytes data*/
uint8_t DHT_read(uint8_t *data,GPIO_TypeDef *GPIOx,uint16_t DHT22_PIN){
 8000826:	4615      	mov	r5, r2
	uint8_t i,checksum;
	checksum = 0;
	GPIO_SetBits(GPIOx, DHT22_PIN);
 8000828:	f000 fdc8 	bl	80013bc <GPIO_SetBits>
    delay_us(250000L);
 800082c:	4836      	ldr	r0, [pc, #216]	; (8000908 <DHT_read+0xf0>)
 800082e:	f000 f885 	bl	800093c <delay_us>

    // configure pin
    pinMode(GPIOx,DHT22_PIN,OUTPUT,0);
 8000832:	2200      	movs	r2, #0
 8000834:	4613      	mov	r3, r2
 8000836:	4630      	mov	r0, r6
 8000838:	4629      	mov	r1, r5
 800083a:	f7ff ffa5 	bl	8000788 <pinMode>

    GPIO_ResetBits(GPIOx, DHT22_PIN);
 800083e:	4629      	mov	r1, r5
 8000840:	4630      	mov	r0, r6
 8000842:	f000 fdbd 	bl	80013c0 <GPIO_ResetBits>
    delay_us(20000L);
 8000846:	f644 6020 	movw	r0, #20000	; 0x4e20
 800084a:	f000 f877 	bl	800093c <delay_us>
    uint8_t cycles[80];

    GPIO_SetBits(GPIOx, DHT22_PIN);
 800084e:	4629      	mov	r1, r5
 8000850:	4630      	mov	r0, r6
 8000852:	f000 fdb3 	bl	80013bc <GPIO_SetBits>
    delay_us(30L);
 8000856:	201e      	movs	r0, #30
 8000858:	f000 f870 	bl	800093c <delay_us>


    pinMode(GPIOx,DHT22_PIN,INPUT,1);
 800085c:	2201      	movs	r2, #1
 800085e:	4613      	mov	r3, r2
 8000860:	4630      	mov	r0, r6
 8000862:	4629      	mov	r1, r5
 8000864:	f7ff ff90 	bl	8000788 <pinMode>
    //delay_us(10L);

    uint8_t expectlow = expectPulse(GPIOx,DHT22_PIN,LOW);
 8000868:	4629      	mov	r1, r5
 800086a:	2200      	movs	r2, #0
 800086c:	4630      	mov	r0, r6
 800086e:	f7ff ffb5 	bl	80007dc <expectPulse>
    uint8_t expecthigh = expectPulse(GPIOx,DHT22_PIN,HIGH);
 8000872:	4630      	mov	r0, r6
 8000874:	4629      	mov	r1, r5
 8000876:	2201      	movs	r2, #1
 8000878:	f7ff ffb0 	bl	80007dc <expectPulse>
 800087c:	466c      	mov	r4, sp
 800087e:	af14      	add	r7, sp, #80	; 0x50
    

    for(i=0;i<80;i+=2){
    	cycles[i] = expectPulse(GPIOx,DHT22_PIN,LOW);
 8000880:	4629      	mov	r1, r5
 8000882:	2200      	movs	r2, #0
 8000884:	4630      	mov	r0, r6
 8000886:	f7ff ffa9 	bl	80007dc <expectPulse>
    	cycles[i+1] = expectPulse(GPIOx,DHT22_PIN,HIGH);
 800088a:	4629      	mov	r1, r5
    uint8_t expectlow = expectPulse(GPIOx,DHT22_PIN,LOW);
    uint8_t expecthigh = expectPulse(GPIOx,DHT22_PIN,HIGH);
    

    for(i=0;i<80;i+=2){
    	cycles[i] = expectPulse(GPIOx,DHT22_PIN,LOW);
 800088c:	7020      	strb	r0, [r4, #0]
    	cycles[i+1] = expectPulse(GPIOx,DHT22_PIN,HIGH);
 800088e:	2201      	movs	r2, #1
 8000890:	4630      	mov	r0, r6
 8000892:	f7ff ffa3 	bl	80007dc <expectPulse>
 8000896:	3402      	adds	r4, #2
 8000898:	f804 0c01 	strb.w	r0, [r4, #-1]

    uint8_t expectlow = expectPulse(GPIOx,DHT22_PIN,LOW);
    uint8_t expecthigh = expectPulse(GPIOx,DHT22_PIN,HIGH);
    

    for(i=0;i<80;i+=2){
 800089c:	42bc      	cmp	r4, r7
 800089e:	d1ef      	bne.n	8000880 <DHT_read+0x68>
 80008a0:	ab00      	add	r3, sp, #0
 80008a2:	2200      	movs	r2, #0
 80008a4:	e010      	b.n	80008c8 <DHT_read+0xb0>

    for(i=0;i<40;i++){
    	uint8_t lowCycles  = cycles[2*i];
		uint8_t highCycles = cycles[2*i+1];

		if(lowCycles == 0 || highCycles == 0){
 80008a6:	b1a9      	cbz	r1, 80008d4 <DHT_read+0xbc>
			return -2;
			break;
		}
		data[i/8] <<= 1;
 80008a8:	f818 4000 	ldrb.w	r4, [r8, r0]
 80008ac:	0064      	lsls	r4, r4, #1
 80008ae:	b2e4      	uxtb	r4, r4
		if (highCycles > 30) {
 80008b0:	291e      	cmp	r1, #30
 80008b2:	f102 0201 	add.w	r2, r2, #1
		    // High cycles are greater than 50us low cycle count, must be a 1.
  			data[i/8] |= 1;
 80008b6:	bf88      	it	hi
 80008b8:	f044 0401 	orrhi.w	r4, r4, #1
    for(i=0;i<80;i+=2){
    	cycles[i] = expectPulse(GPIOx,DHT22_PIN,LOW);
    	cycles[i+1] = expectPulse(GPIOx,DHT22_PIN,HIGH);
    }

    for(i=0;i<40;i++){
 80008bc:	2a28      	cmp	r2, #40	; 0x28
			break;
		}
		data[i/8] <<= 1;
		if (highCycles > 30) {
		    // High cycles are greater than 50us low cycle count, must be a 1.
  			data[i/8] |= 1;
 80008be:	f808 4000 	strb.w	r4, [r8, r0]
 80008c2:	f103 0302 	add.w	r3, r3, #2
    for(i=0;i<80;i+=2){
    	cycles[i] = expectPulse(GPIOx,DHT22_PIN,LOW);
    	cycles[i+1] = expectPulse(GPIOx,DHT22_PIN,HIGH);
    }

    for(i=0;i<40;i++){
 80008c6:	d009      	beq.n	80008dc <DHT_read+0xc4>
    	uint8_t lowCycles  = cycles[2*i];
		uint8_t highCycles = cycles[2*i+1];

		if(lowCycles == 0 || highCycles == 0){
 80008c8:	781c      	ldrb	r4, [r3, #0]
    	cycles[i+1] = expectPulse(GPIOx,DHT22_PIN,HIGH);
    }

    for(i=0;i<40;i++){
    	uint8_t lowCycles  = cycles[2*i];
		uint8_t highCycles = cycles[2*i+1];
 80008ca:	7859      	ldrb	r1, [r3, #1]
 80008cc:	b2d0      	uxtb	r0, r2

		if(lowCycles == 0 || highCycles == 0){
			return -2;
			break;
		}
		data[i/8] <<= 1;
 80008ce:	08c0      	lsrs	r0, r0, #3

    for(i=0;i<40;i++){
    	uint8_t lowCycles  = cycles[2*i];
		uint8_t highCycles = cycles[2*i+1];

		if(lowCycles == 0 || highCycles == 0){
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d1e8      	bne.n	80008a6 <DHT_read+0x8e>
			return -2;
 80008d4:	20fe      	movs	r0, #254	; 0xfe
    checksum = data[0]+data[1]+data[2]+data[3];
    if(checksum == data[4])
    	return 1;
    else
    	return -1;
}
 80008d6:	b014      	add	sp, #80	; 0x50
 80008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    // High cycles are greater than 50us low cycle count, must be a 1.
  			data[i/8] |= 1;
		}
    }

    checksum = data[0]+data[1]+data[2]+data[3];
 80008dc:	f898 4001 	ldrb.w	r4, [r8, #1]
 80008e0:	f898 1000 	ldrb.w	r1, [r8]
 80008e4:	f898 2002 	ldrb.w	r2, [r8, #2]
 80008e8:	f898 3003 	ldrb.w	r3, [r8, #3]
    if(checksum == data[4])
 80008ec:	f898 0004 	ldrb.w	r0, [r8, #4]
		    // High cycles are greater than 50us low cycle count, must be a 1.
  			data[i/8] |= 1;
		}
    }

    checksum = data[0]+data[1]+data[2]+data[3];
 80008f0:	4421      	add	r1, r4
 80008f2:	440a      	add	r2, r1
 80008f4:	4413      	add	r3, r2
    if(checksum == data[4])
 80008f6:	b2db      	uxtb	r3, r3
    	return 1;
 80008f8:	4298      	cmp	r0, r3
 80008fa:	bf14      	ite	ne
 80008fc:	20ff      	movne	r0, #255	; 0xff
 80008fe:	2001      	moveq	r0, #1
    else
    	return -1;
}
 8000900:	b014      	add	sp, #80	; 0x50
 8000902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000906:	bf00      	nop
 8000908:	0003d090 	.word	0x0003d090

0800090c <timer_get>:
static __IO uint32_t uwTimingTimer;
static __IO uint32_t uwTimingDelay;

uint32_t timer_get()
{
  return uwTimingTimer;
 800090c:	4b01      	ldr	r3, [pc, #4]	; (8000914 <timer_get+0x8>)
 800090e:	6818      	ldr	r0, [r3, #0]
}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200000f4 	.word	0x200000f4

08000918 <timer_start>:
void timer_start(__IO uint32_t nTime)
{
 8000918:	b082      	sub	sp, #8
  uwTimingTimer = nTime;
 800091a:	4b03      	ldr	r3, [pc, #12]	; (8000928 <timer_start+0x10>)
uint32_t timer_get()
{
  return uwTimingTimer;
}
void timer_start(__IO uint32_t nTime)
{
 800091c:	9001      	str	r0, [sp, #4]
  uwTimingTimer = nTime;
 800091e:	9a01      	ldr	r2, [sp, #4]
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	b002      	add	sp, #8
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000f4 	.word	0x200000f4

0800092c <timer_block>:

void timer_block()
{
 800092c:	4a02      	ldr	r2, [pc, #8]	; (8000938 <timer_block+0xc>)
  while(uwTimingTimer != 0);
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1fc      	bne.n	800092e <timer_block+0x2>
}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200000f4 	.word	0x200000f4

0800093c <delay_us>:

void delay_us(__IO uint32_t nTime) {
 800093c:	b082      	sub	sp, #8

  uwTimingDelay = nTime;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <delay_us+0x14>)
void timer_block()
{
  while(uwTimingTimer != 0);
}

void delay_us(__IO uint32_t nTime) {
 8000940:	9001      	str	r0, [sp, #4]

  uwTimingDelay = nTime;
 8000942:	9b01      	ldr	r3, [sp, #4]
 8000944:	6053      	str	r3, [r2, #4]
  while(uwTimingDelay != 0);
 8000946:	6853      	ldr	r3, [r2, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1fc      	bne.n	8000946 <delay_us+0xa>
}
 800094c:	b002      	add	sp, #8
 800094e:	4770      	bx	lr
 8000950:	200000f4 	.word	0x200000f4

08000954 <timer_decrement>:

void timer_decrement(void) // called by SysTick_Handler
{
  if (uwTimingDelay != 0)
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <timer_decrement+0x1c>)
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	b112      	cbz	r2, 8000960 <timer_decrement+0xc>
  {
    uwTimingDelay--;
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	3a01      	subs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  }
  if (uwTimingTimer != 0)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b03      	ldr	r3, [pc, #12]	; (8000970 <timer_decrement+0x1c>)
 8000964:	b112      	cbz	r2, 800096c <timer_decrement+0x18>
  {
    uwTimingTimer--;
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	3a01      	subs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	200000f4 	.word	0x200000f4

08000974 <timer_init>:
  }
}

void timer_init(void) {
  if (SysTick_Config(SystemCoreClock / 1000000))
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <timer_init+0x34>)
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <timer_init+0x38>)
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	fba3 1202 	umull	r1, r2, r3, r2
 800097e:	0c92      	lsrs	r2, r2, #18
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000980:	3a01      	subs	r2, #1
 8000982:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
  {
    uwTimingTimer--;
  }
}

void timer_init(void) {
 8000986:	b410      	push	{r4}
 8000988:	d20c      	bcs.n	80009a4 <timer_init+0x30>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <timer_init+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <timer_init+0x40>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800098e:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000990:	24f0      	movs	r4, #240	; 0xf0
 8000992:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000996:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000998:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800099a:	6099      	str	r1, [r3, #8]
  if (SysTick_Config(SystemCoreClock / 1000000))
  {
    /* Capture error */ 
    while (1);
  }
 800099c:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	4770      	bx	lr
 80009a4:	e7fe      	b.n	80009a4 <timer_init+0x30>
 80009a6:	bf00      	nop
 80009a8:	20000010 	.word	0x20000010
 80009ac:	431bde83 	.word	0x431bde83
 80009b0:	e000e010 	.word	0xe000e010
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <getSensorPin>:
	dht_init(sensor_pin.DHT_PORT,sensor_pin.DHT22_PIN);
	return 0;
}

void getSensorPin(SENSOR_PIN *sensor_pin,uint8_t sensorID){
	sensor_pin->DHT22_PIN = DHT22_PIN[sensorID-1];
 80009b8:	1e4a      	subs	r2, r1, #1
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <getSensorPin+0x88>)
	if(sensorID<5){
 80009bc:	2904      	cmp	r1, #4
	dht_init(sensor_pin.DHT_PORT,sensor_pin.DHT22_PIN);
	return 0;
}

void getSensorPin(SENSOR_PIN *sensor_pin,uint8_t sensorID){
	sensor_pin->DHT22_PIN = DHT22_PIN[sensorID-1];
 80009be:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80009c2:	8002      	strh	r2, [r0, #0]
	if(sensorID<5){
 80009c4:	d923      	bls.n	8000a0e <getSensorPin+0x56>
		/*GPIOC*/
		sensor_pin->DHT_PORT = DHT_PORT[0];
	}
	else if(sensorID>4 && sensorID<13){
 80009c6:	1f4a      	subs	r2, r1, #5
 80009c8:	2a07      	cmp	r2, #7
 80009ca:	d91d      	bls.n	8000a08 <getSensorPin+0x50>
		/*GPIOA*/
		sensor_pin->DHT_PORT = DHT_PORT[1];
	}
	else if(sensorID>12 && sensorID<15){
 80009cc:	f1a1 020d 	sub.w	r2, r1, #13
 80009d0:	2a01      	cmp	r2, #1
 80009d2:	d922      	bls.n	8000a1a <getSensorPin+0x62>
		/*GPIOC*/
		sensor_pin->DHT_PORT = DHT_PORT[2];
	}
	else if(sensorID>14 && sensorID<17){
 80009d4:	f1a1 020f 	sub.w	r2, r1, #15
 80009d8:	2a01      	cmp	r2, #1
 80009da:	d921      	bls.n	8000a20 <getSensorPin+0x68>
		/*GPIOB*/
		sensor_pin->DHT_PORT = DHT_PORT[3];
	}
	else if(sensorID>16 && sensorID<19){
 80009dc:	f1a1 0211 	sub.w	r2, r1, #17
 80009e0:	2a01      	cmp	r2, #1
 80009e2:	d920      	bls.n	8000a26 <getSensorPin+0x6e>
		/*GPIOD*/
		sensor_pin->DHT_PORT = DHT_PORT[4];
	}

	else if(sensorID>18 && sensorID<27){
 80009e4:	f1a1 0213 	sub.w	r2, r1, #19
 80009e8:	2a07      	cmp	r2, #7
 80009ea:	d913      	bls.n	8000a14 <getSensorPin+0x5c>
		/*GPIOE*/
		sensor_pin->DHT_PORT = DHT_PORT[5];
	}
	else if(sensorID>26 && sensorID<29){
 80009ec:	f1a1 021b 	sub.w	r2, r1, #27
 80009f0:	2a01      	cmp	r2, #1
 80009f2:	d91b      	bls.n	8000a2c <getSensorPin+0x74>
		/**GPIOB*/
		sensor_pin->DHT_PORT = DHT_PORT[6];
	}
	else if(sensorID>28 && sensorID<30){
 80009f4:	291d      	cmp	r1, #29
 80009f6:	d01c      	beq.n	8000a32 <getSensorPin+0x7a>
		/*GPIOD*/
		sensor_pin->DHT_PORT = DHT_PORT[7];
	}
	else if(sensorID>29 && sensorID<31){
 80009f8:	291e      	cmp	r1, #30
 80009fa:	d01d      	beq.n	8000a38 <getSensorPin+0x80>
		/*GPIOB*/
		sensor_pin->DHT_PORT = DHT_PORT[8];
	}
	else if(sensorID>30 && sensorID<33){
 80009fc:	391f      	subs	r1, #31
 80009fe:	2901      	cmp	r1, #1
		/*GPIOD*/
		sensor_pin->DHT_PORT = DHT_PORT[9];
 8000a00:	bf9c      	itt	ls
 8000a02:	6e5b      	ldrls	r3, [r3, #100]	; 0x64
 8000a04:	6043      	strls	r3, [r0, #4]
 8000a06:	4770      	bx	lr
		/*GPIOC*/
		sensor_pin->DHT_PORT = DHT_PORT[0];
	}
	else if(sensorID>4 && sensorID<13){
		/*GPIOA*/
		sensor_pin->DHT_PORT = DHT_PORT[1];
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	6043      	str	r3, [r0, #4]
 8000a0c:	4770      	bx	lr

void getSensorPin(SENSOR_PIN *sensor_pin,uint8_t sensorID){
	sensor_pin->DHT22_PIN = DHT22_PIN[sensorID-1];
	if(sensorID<5){
		/*GPIOC*/
		sensor_pin->DHT_PORT = DHT_PORT[0];
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	6043      	str	r3, [r0, #4]
 8000a12:	4770      	bx	lr
		sensor_pin->DHT_PORT = DHT_PORT[4];
	}

	else if(sensorID>18 && sensorID<27){
		/*GPIOE*/
		sensor_pin->DHT_PORT = DHT_PORT[5];
 8000a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a16:	6043      	str	r3, [r0, #4]
 8000a18:	4770      	bx	lr
		/*GPIOA*/
		sensor_pin->DHT_PORT = DHT_PORT[1];
	}
	else if(sensorID>12 && sensorID<15){
		/*GPIOC*/
		sensor_pin->DHT_PORT = DHT_PORT[2];
 8000a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1c:	6043      	str	r3, [r0, #4]
 8000a1e:	4770      	bx	lr
	}
	else if(sensorID>14 && sensorID<17){
		/*GPIOB*/
		sensor_pin->DHT_PORT = DHT_PORT[3];
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	6043      	str	r3, [r0, #4]
 8000a24:	4770      	bx	lr
	}
	else if(sensorID>16 && sensorID<19){
		/*GPIOD*/
		sensor_pin->DHT_PORT = DHT_PORT[4];
 8000a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a28:	6043      	str	r3, [r0, #4]
 8000a2a:	4770      	bx	lr
		/*GPIOE*/
		sensor_pin->DHT_PORT = DHT_PORT[5];
	}
	else if(sensorID>26 && sensorID<29){
		/**GPIOB*/
		sensor_pin->DHT_PORT = DHT_PORT[6];
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	6043      	str	r3, [r0, #4]
 8000a30:	4770      	bx	lr
	}
	else if(sensorID>28 && sensorID<30){
		/*GPIOD*/
		sensor_pin->DHT_PORT = DHT_PORT[7];
 8000a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a34:	6043      	str	r3, [r0, #4]
 8000a36:	4770      	bx	lr
	}
	else if(sensorID>29 && sensorID<31){
		/*GPIOB*/
		sensor_pin->DHT_PORT = DHT_PORT[8];
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	6043      	str	r3, [r0, #4]
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000014 	.word	0x20000014

08000a44 <readOne>:
}

/*
read specific sensor No.1-33 for testing
*/
uint8_t readOne(uint8_t sensorID/*1-33*/,uint8_t *data){
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4603      	mov	r3, r0
 8000a48:	b082      	sub	sp, #8
 8000a4a:	460c      	mov	r4, r1
	SENSOR_PIN sensor_pin;
	uint8_t ans;
	getSensorPin(&sensor_pin,sensorID);
 8000a4c:	4668      	mov	r0, sp
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f7ff ffb2 	bl	80009b8 <getSensorPin>
	ans = DHT_read(data,sensor_pin.DHT_PORT,sensor_pin.DHT22_PIN);
 8000a54:	4620      	mov	r0, r4
 8000a56:	9901      	ldr	r1, [sp, #4]
 8000a58:	f8bd 2000 	ldrh.w	r2, [sp]
 8000a5c:	f7ff fedc 	bl	8000818 <DHT_read>
	return ans;
}
 8000a60:	b002      	add	sp, #8
 8000a62:	bd10      	pop	{r4, pc}

08000a64 <readAll>:
	}
}
/*
read all available sensors
*/
void readAll(uint8_t datum[]){
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4605      	mov	r5, r0
	uint8_t index;
	for(index=1;index<33;index++){
 8000a68:	2401      	movs	r4, #1
		readOne(index,&datum[(index-1)*5]);
 8000a6a:	4620      	mov	r0, r4
/*
read all available sensors
*/
void readAll(uint8_t datum[]){
	uint8_t index;
	for(index=1;index<33;index++){
 8000a6c:	3401      	adds	r4, #1
		readOne(index,&datum[(index-1)*5]);
 8000a6e:	4629      	mov	r1, r5
/*
read all available sensors
*/
void readAll(uint8_t datum[]){
	uint8_t index;
	for(index=1;index<33;index++){
 8000a70:	b2e4      	uxtb	r4, r4
		readOne(index,&datum[(index-1)*5]);
 8000a72:	f7ff ffe7 	bl	8000a44 <readOne>
/*
read all available sensors
*/
void readAll(uint8_t datum[]){
	uint8_t index;
	for(index=1;index<33;index++){
 8000a76:	2c21      	cmp	r4, #33	; 0x21
 8000a78:	f105 0505 	add.w	r5, r5, #5
 8000a7c:	d1f5      	bne.n	8000a6a <readAll+0x6>
		readOne(index,&datum[(index-1)*5]);
	}
}
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}

08000a80 <initOne>:
	getSensorPin(&sensor_pin,sensorID);
	ans = DHT_read(data,sensor_pin.DHT_PORT,sensor_pin.DHT22_PIN);
	return ans;
}

uint8_t initOne(uint8_t sensorID/*1-33*/){
 8000a80:	b500      	push	{lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	4601      	mov	r1, r0
	SENSOR_PIN sensor_pin;
	getSensorPin(&sensor_pin,sensorID);
 8000a86:	4668      	mov	r0, sp
 8000a88:	f7ff ff96 	bl	80009b8 <getSensorPin>
	dht_init(sensor_pin.DHT_PORT,sensor_pin.DHT22_PIN);
 8000a8c:	9801      	ldr	r0, [sp, #4]
 8000a8e:	f8bd 1000 	ldrh.w	r1, [sp]
 8000a92:	f7ff fe65 	bl	8000760 <dht_init>
	return 0;
}
 8000a96:	2000      	movs	r0, #0
 8000a98:	b003      	add	sp, #12
 8000a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a9e:	bf00      	nop

08000aa0 <initAll>:
/****************************************************************************/

/*
Initialize all data pins
*/
void initAll(void){
 8000aa0:	b510      	push	{r4, lr}
	uint8_t index;
	for(index=1;index<34;index++){
 8000aa2:	2401      	movs	r4, #1
		initOne(index);
 8000aa4:	4620      	mov	r0, r4
/*
Initialize all data pins
*/
void initAll(void){
	uint8_t index;
	for(index=1;index<34;index++){
 8000aa6:	3401      	adds	r4, #1
 8000aa8:	b2e4      	uxtb	r4, r4
		initOne(index);
 8000aaa:	f7ff ffe9 	bl	8000a80 <initOne>
/*
Initialize all data pins
*/
void initAll(void){
	uint8_t index;
	for(index=1;index<34;index++){
 8000aae:	2c22      	cmp	r4, #34	; 0x22
 8000ab0:	d1f8      	bne.n	8000aa4 <initAll+0x4>
		initOne(index);
	}
}
 8000ab2:	bd10      	pop	{r4, pc}

08000ab4 <gen_crc16>:

/*
Generate CRC16 checksum
*/
uint16_t gen_crc16(const uint8_t *data_p, uint16_t length)
{
 8000ab4:	b430      	push	{r4, r5}
	uint8_t i;
    unsigned int data;
    uint16_t crc = 0xffff;

      if (length == 0)
 8000ab6:	b309      	cbz	r1, 8000afc <gen_crc16+0x48>
 8000ab8:	3901      	subs	r1, #1
 8000aba:	b28d      	uxth	r5, r1
 8000abc:	3501      	adds	r5, #1
 8000abe:	4405      	add	r5, r0
 8000ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
            return (~crc);

      do
      {
            for (i=0, data=(unsigned int)0xff & *data_p++;
 8000ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ac8:	2108      	movs	r1, #8
                 i < 8; 
                 i++, data >>= 1)
            {
                  if ((crc & 0x0001) ^ (data & 0x0001))
 8000aca:	ea83 0402 	eor.w	r4, r3, r2
 8000ace:	07e4      	lsls	r4, r4, #31
                        crc = (crc >> 1) ^ POLY;
 8000ad0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000ad4:	bf48      	it	mi
 8000ad6:	f483 5381 	eormi.w	r3, r3, #4128	; 0x1020
 8000ada:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8000ade:	bf48      	it	mi
 8000ae0:	f083 0301 	eormi.w	r3, r3, #1
      if (length == 0)
            return (~crc);

      do
      {
            for (i=0, data=(unsigned int)0xff & *data_p++;
 8000ae4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
                 i < 8; 
                 i++, data >>= 1)
 8000ae8:	ea4f 0252 	mov.w	r2, r2, lsr #1
      if (length == 0)
            return (~crc);

      do
      {
            for (i=0, data=(unsigned int)0xff & *data_p++;
 8000aec:	d1ed      	bne.n	8000aca <gen_crc16+0x16>
            {
                  if ((crc & 0x0001) ^ (data & 0x0001))
                        crc = (crc >> 1) ^ POLY;
                  else  crc >>= 1;
            }
      } while (--length);
 8000aee:	42a8      	cmp	r0, r5
 8000af0:	d1e8      	bne.n	8000ac4 <gen_crc16+0x10>

      crc = ~crc;
 8000af2:	43db      	mvns	r3, r3
 8000af4:	ba58      	rev16	r0, r3
 8000af6:	b280      	uxth	r0, r0
      data = crc;
      crc = (crc << 8) | (data >> 8 & 0xff);

      return (crc);
}
 8000af8:	bc30      	pop	{r4, r5}
 8000afa:	4770      	bx	lr
	uint8_t i;
    unsigned int data;
    uint16_t crc = 0xffff;

      if (length == 0)
            return (~crc);
 8000afc:	4608      	mov	r0, r1
      crc = ~crc;
      data = crc;
      crc = (crc << 8) | (data >> 8 & 0xff);

      return (crc);
}
 8000afe:	bc30      	pop	{r4, r5}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <crc16_ccitt>:
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	register int counter;
	register unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 8000b04:	2900      	cmp	r1, #0
	0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
	0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
unsigned short crc16_ccitt(const void *buf, int len)
{
 8000b06:	b410      	push	{r4}
	register int counter;
	register unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 8000b08:	dd11      	ble.n	8000b2e <crc16_ccitt+0x2a>
 8000b0a:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <crc16_ccitt+0x30>)
 8000b0c:	4401      	add	r1, r0
};
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	register int counter;
	register unsigned short crc = 0;
 8000b0e:	2300      	movs	r3, #0
	for( counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 8000b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b14:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	register int counter;
	register unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 8000b18:	4288      	cmp	r0, r1
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
 8000b1a:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8000b1e:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 8000b22:	b29b      	uxth	r3, r3
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	register int counter;
	register unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
 8000b24:	d1f4      	bne.n	8000b10 <crc16_ccitt+0xc>
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(char *)buf++)&0x00FF];
	return crc;
 8000b26:	4618      	mov	r0, r3
 8000b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2c:	4770      	bx	lr
};
  
unsigned short crc16_ccitt(const void *buf, int len)
{
	register int counter;
	register unsigned short crc = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e7f9      	b.n	8000b26 <crc16_ccitt+0x22>
 8000b32:	bf00      	nop
 8000b34:	08002a78 	.word	0x08002a78

08000b38 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000b38:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000b3c:	4b02      	ldr	r3, [pc, #8]	; (8000b48 <NVIC_PriorityGroupConfig+0x10>)
 8000b3e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000b42:	60d8      	str	r0, [r3, #12]
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b4c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b4e:	b4f0      	push	{r4, r5, r6, r7}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b50:	b963      	cbnz	r3, 8000b6c <NVIC_Init+0x20>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b52:	7803      	ldrb	r3, [r0, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <NVIC_Init+0x70>)
 8000b56:	0959      	lsrs	r1, r3, #5
 8000b58:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	2001      	movs	r0, #1
 8000b60:	fa00 f303 	lsl.w	r3, r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b64:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b68:	bcf0      	pop	{r4, r5, r6, r7}
 8000b6a:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <NVIC_Init+0x74>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b6e:	7847      	ldrb	r7, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b70:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b72:	7885      	ldrb	r5, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b74:	7803      	ldrb	r3, [r0, #0]
 8000b76:	4911      	ldr	r1, [pc, #68]	; (8000bbc <NVIC_Init+0x70>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8000b7e:	f1c2 0404 	rsb	r4, r2, #4
    tmpsub = tmpsub >> tmppriority;
 8000b82:	260f      	movs	r6, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b84:	b2e4      	uxtb	r4, r4
 8000b86:	fa07 f404 	lsl.w	r4, r7, r4
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000b8a:	fa46 f202 	asr.w	r2, r6, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b8e:	b2e4      	uxtb	r4, r4
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b90:	402a      	ands	r2, r5
 8000b92:	4322      	orrs	r2, r4
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b94:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b98:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ba4:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f003 021f 	and.w	r2, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bac:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000bc4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000bc8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000bcc:	4b01      	ldr	r3, [pc, #4]	; (8000bd4 <NVIC_SetVectorTable+0x10>)
 8000bce:	4308      	orrs	r0, r1
 8000bd0:	6098      	str	r0, [r3, #8]
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <NVIC_SystemLPConfig+0x14>)
 8000bda:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000bdc:	b919      	cbnz	r1, 8000be6 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000bde:	ea22 0000 	bic.w	r0, r2, r0
 8000be2:	6118      	str	r0, [r3, #16]
 8000be4:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000be6:	4310      	orrs	r0, r2
 8000be8:	6118      	str	r0, [r3, #16]
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SysTick_CLKSourceConfig+0x14>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000bf4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000bf6:	bf0c      	ite	eq
 8000bf8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000bfc:	f022 0204 	bicne.w	r2, r2, #4
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	4770      	bx	lr
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c0c:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c0e:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c10:	f041 0101 	orr.w	r1, r1, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000c14:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c16:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000c1a:	6819      	ldr	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c1c:	4d0c      	ldr	r5, [pc, #48]	; (8000c50 <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000c1e:	4c0d      	ldr	r4, [pc, #52]	; (8000c54 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000c20:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 8000c24:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 8000c28:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c2a:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000c2c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000c30:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c34:	6819      	ldr	r1, [r3, #0]
 8000c36:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000c3a:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 8000c3c:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c3e:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	24003000 	.word	0x24003000
 8000c50:	24003010 	.word	0x24003010
 8000c54:	20003000 	.word	0x20003000

08000c58 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <RCC_HSEConfig+0xc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000c5e:	7018      	strb	r0, [r3, #0]
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023802 	.word	0x40023802

08000c68 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000c68:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 8000c6a:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <RCC_WaitForHSEStartUp+0x34>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000c6e:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000c70:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c72:	039b      	lsls	r3, r3, #14
 8000c74:	d40c      	bmi.n	8000c90 <RCC_WaitForHSEStartUp+0x28>
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000c7c:	9b01      	ldr	r3, [sp, #4]
 8000c7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000c82:	d1f5      	bne.n	8000c70 <RCC_WaitForHSEStartUp+0x8>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <RCC_WaitForHSEStartUp+0x34>)
 8000c86:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000c88:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000c8c:	b002      	add	sp, #8
 8000c8e:	4770      	bx	lr
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000c90:	9b01      	ldr	r3, [sp, #4]
 8000c92:	3301      	adds	r3, #1
 8000c94:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000c96:	9b01      	ldr	r3, [sp, #4]
 8000c98:	e7f4      	b.n	8000c84 <RCC_WaitForHSEStartUp+0x1c>
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <RCC_AdjustHSICalibrationValue+0x10>)
 8000ca2:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000ca4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000ca8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000cac:	6018      	str	r0, [r3, #0]
 8000cae:	4770      	bx	lr
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000cb4:	4b01      	ldr	r3, [pc, #4]	; (8000cbc <RCC_HSICmd+0x8>)
 8000cb6:	6018      	str	r0, [r3, #0]
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	42470000 	.word	0x42470000

08000cc0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <RCC_LSEConfig+0x1c>)
 8000cc2:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000cc4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000cc6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000cc8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000cca:	d005      	beq.n	8000cd8 <RCC_LSEConfig+0x18>
 8000ccc:	2804      	cmp	r0, #4
 8000cce:	d102      	bne.n	8000cd6 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000cd0:	2205      	movs	r2, #5
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	4770      	bx	lr
 8000cd6:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000cd8:	7018      	strb	r0, [r3, #0]
      break;
 8000cda:	4770      	bx	lr
 8000cdc:	40023870 	.word	0x40023870

08000ce0 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <RCC_LSICmd+0x8>)
 8000ce2:	6018      	str	r0, [r3, #0]
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	42470e80 	.word	0x42470e80

08000cec <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000cec:	b430      	push	{r4, r5}
 8000cee:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000cf0:	4d06      	ldr	r5, [pc, #24]	; (8000d0c <RCC_PLLConfig+0x20>)
 8000cf2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8000cf6:	085b      	lsrs	r3, r3, #1
 8000cf8:	4301      	orrs	r1, r0
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8000d00:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d04:	606b      	str	r3, [r5, #4]
                 (PLLQ << 24);
}
 8000d06:	bc30      	pop	{r4, r5}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000d10:	4b01      	ldr	r3, [pc, #4]	; (8000d18 <RCC_PLLCmd+0x8>)
 8000d12:	6018      	str	r0, [r3, #0]
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	42470060 	.word	0x42470060

08000d1c <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000d1c:	0709      	lsls	r1, r1, #28
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <RCC_PLLI2SConfig+0x10>)
 8000d20:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000d24:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000d30:	4b01      	ldr	r3, [pc, #4]	; (8000d38 <RCC_PLLI2SCmd+0x8>)
 8000d32:	6018      	str	r0, [r3, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	42470068 	.word	0x42470068

08000d3c <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000d3c:	0712      	lsls	r2, r2, #28
 8000d3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000d42:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <RCC_PLLSAIConfig+0x14>)
 8000d44:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000d48:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000d54:	4b01      	ldr	r3, [pc, #4]	; (8000d5c <RCC_PLLSAICmd+0x8>)
 8000d56:	6018      	str	r0, [r3, #0]
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	42470070 	.word	0x42470070

08000d60 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000d60:	4b01      	ldr	r3, [pc, #4]	; (8000d68 <RCC_ClockSecuritySystemCmd+0x8>)
 8000d62:	6018      	str	r0, [r3, #0]
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	4247004c 	.word	0x4247004c

08000d6c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <RCC_MCO1Config+0x10>)
 8000d6e:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8000d70:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000d74:	4311      	orrs	r1, r2
 8000d76:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000d78:	6098      	str	r0, [r3, #8]
 8000d7a:	4770      	bx	lr
 8000d7c:	40023800 	.word	0x40023800

08000d80 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <RCC_MCO2Config+0x10>)
 8000d82:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000d84:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000d88:	4311      	orrs	r1, r2
 8000d8a:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000d8c:	6098      	str	r0, [r3, #8]
 8000d8e:	4770      	bx	lr
 8000d90:	40023800 	.word	0x40023800

08000d94 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <RCC_SYSCLKConfig+0x10>)
 8000d96:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000d98:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000d9c:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000d9e:	6098      	str	r0, [r3, #8]
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800

08000da8 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <RCC_GetSYSCLKSource+0xc>)
 8000daa:	6898      	ldr	r0, [r3, #8]
}
 8000dac:	f000 000c 	and.w	r0, r0, #12
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <RCC_HCLKConfig+0x10>)
 8000dba:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000dbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000dc0:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000dc2:	6098      	str	r0, [r3, #8]
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <RCC_PCLK1Config+0x10>)
 8000dce:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000dd0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000dd4:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000dd6:	6098      	str	r0, [r3, #8]
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <RCC_PCLK2Config+0x10>)
 8000de2:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000de4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000de8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000dec:	6098      	str	r0, [r3, #8]
 8000dee:	4770      	bx	lr
 8000df0:	40023800 	.word	0x40023800

08000df4 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000df4:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <RCC_GetClocksFreq+0x80>)
 8000df6:	6893      	ldr	r3, [r2, #8]
 8000df8:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000dfc:	2b04      	cmp	r3, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000dfe:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8000e00:	d01b      	beq.n	8000e3a <RCC_GetClocksFreq+0x46>
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d01c      	beq.n	8000e40 <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <RCC_GetClocksFreq+0x84>)
 8000e08:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e0a:	491a      	ldr	r1, [pc, #104]	; (8000e74 <RCC_GetClocksFreq+0x80>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <RCC_GetClocksFreq+0x88>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e0e:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 4;
 8000e10:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000e14:	5d14      	ldrb	r4, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000e16:	40e3      	lsrs	r3, r4
 8000e18:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000e1a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 8000e1c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000e20:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e22:	fa23 f404 	lsr.w	r4, r3, r4
 8000e26:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000e28:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000e2a:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000e2e:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000e32:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e34:	40d3      	lsrs	r3, r2
 8000e36:	60c3      	str	r3, [r0, #12]
}
 8000e38:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <RCC_GetClocksFreq+0x8c>)
 8000e3c:	6003      	str	r3, [r0, #0]
      break;
 8000e3e:	e7e4      	b.n	8000e0a <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000e40:	6854      	ldr	r4, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e42:	6851      	ldr	r1, [r2, #4]
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e44:	6852      	ldr	r2, [r2, #4]
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
 8000e46:	0263      	lsls	r3, r4, #9
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e48:	bf4c      	ite	mi
 8000e4a:	4b0d      	ldrmi	r3, [pc, #52]	; (8000e80 <RCC_GetClocksFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e4c:	4b0a      	ldrpl	r3, [pc, #40]	; (8000e78 <RCC_GetClocksFreq+0x84>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000e52:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fb03 f302 	mul.w	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <RCC_GetClocksFreq+0x80>)
 8000e60:	6852      	ldr	r2, [r2, #4]
 8000e62:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8000e66:	3201      	adds	r2, #1
 8000e68:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e6e:	6003      	str	r3, [r0, #0]
      break;
 8000e70:	e7cb      	b.n	8000e0a <RCC_GetClocksFreq+0x16>
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	00f42400 	.word	0x00f42400
 8000e7c:	2000007c 	.word	0x2000007c
 8000e80:	007a1200 	.word	0x007a1200

08000e84 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000e84:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e8c:	d109      	bne.n	8000ea2 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <RCC_RTCCLKConfig+0x2c>)
 8000e90:	6891      	ldr	r1, [r2, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000e92:	f020 4370 	bic.w	r3, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000e96:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9e:	430b      	orrs	r3, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000ea0:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <RCC_RTCCLKConfig+0x2c>)
 8000ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000ea6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000eaa:	4310      	orrs	r0, r2
 8000eac:	6718      	str	r0, [r3, #112]	; 0x70
 8000eae:	4770      	bx	lr
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000eb4:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <RCC_RTCCLKCmd+0x8>)
 8000eb6:	6018      	str	r0, [r3, #0]
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	42470e3c 	.word	0x42470e3c

08000ec0 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000ec0:	4b01      	ldr	r3, [pc, #4]	; (8000ec8 <RCC_BackupResetCmd+0x8>)
 8000ec2:	6018      	str	r0, [r3, #0]
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	42470e40 	.word	0x42470e40

08000ecc <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <RCC_I2SCLKConfig+0x8>)
 8000ece:	6018      	str	r0, [r3, #0]
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	4247015c 	.word	0x4247015c

08000ed8 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8000eda:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000ede:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000ee0:	f022 021f 	bic.w	r2, r2, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000ee4:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000eea:	4770      	bx	lr
 8000eec:	40023800 	.word	0x40023800

08000ef0 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8000ef2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000ef6:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000ef8:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000efc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <RCC_SAIBlockACLKConfig+0x14>)
 8000f0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000f12:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000f16:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000f18:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <RCC_SAIBlockBCLKConfig+0x14>)
 8000f26:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8000f2a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000f2e:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000f30:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <RCC_LTDCCLKDivConfig+0x14>)
 8000f3e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000f42:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000f46:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000f48:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000f54:	4b01      	ldr	r3, [pc, #4]	; (8000f5c <RCC_TIMCLKPresConfig+0x8>)
 8000f56:	6018      	str	r0, [r3, #0]
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	424711e0 	.word	0x424711e0

08000f60 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <RCC_AHB1PeriphClockCmd+0x14>)
 8000f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f64:	b919      	cbnz	r1, 8000f6e <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000f66:	ea22 0000 	bic.w	r0, r2, r0
 8000f6a:	6318      	str	r0, [r3, #48]	; 0x30
 8000f6c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000f6e:	4310      	orrs	r0, r2
 8000f70:	6318      	str	r0, [r3, #48]	; 0x30
 8000f72:	4770      	bx	lr
 8000f74:	40023800 	.word	0x40023800

08000f78 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <RCC_AHB2PeriphClockCmd+0x14>)
 8000f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f7c:	b919      	cbnz	r1, 8000f86 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000f7e:	ea22 0000 	bic.w	r0, r2, r0
 8000f82:	6358      	str	r0, [r3, #52]	; 0x34
 8000f84:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000f86:	4310      	orrs	r0, r2
 8000f88:	6358      	str	r0, [r3, #52]	; 0x34
 8000f8a:	4770      	bx	lr
 8000f8c:	40023800 	.word	0x40023800

08000f90 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <RCC_AHB3PeriphClockCmd+0x14>)
 8000f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f94:	b919      	cbnz	r1, 8000f9e <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000f96:	ea22 0000 	bic.w	r0, r2, r0
 8000f9a:	6398      	str	r0, [r3, #56]	; 0x38
 8000f9c:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000f9e:	4310      	orrs	r0, r2
 8000fa0:	6398      	str	r0, [r3, #56]	; 0x38
 8000fa2:	4770      	bx	lr
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <RCC_APB1PeriphClockCmd+0x14>)
 8000faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fac:	b919      	cbnz	r1, 8000fb6 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000fae:	ea22 0000 	bic.w	r0, r2, r0
 8000fb2:	6418      	str	r0, [r3, #64]	; 0x40
 8000fb4:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000fb6:	4310      	orrs	r0, r2
 8000fb8:	6418      	str	r0, [r3, #64]	; 0x40
 8000fba:	4770      	bx	lr
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <RCC_APB2PeriphClockCmd+0x14>)
 8000fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fc4:	b919      	cbnz	r1, 8000fce <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000fc6:	ea22 0000 	bic.w	r0, r2, r0
 8000fca:	6458      	str	r0, [r3, #68]	; 0x44
 8000fcc:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000fce:	4310      	orrs	r0, r2
 8000fd0:	6458      	str	r0, [r3, #68]	; 0x44
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <RCC_AHB1PeriphResetCmd+0x14>)
 8000fda:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000fdc:	b919      	cbnz	r1, 8000fe6 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000fde:	ea22 0000 	bic.w	r0, r2, r0
 8000fe2:	6118      	str	r0, [r3, #16]
 8000fe4:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000fe6:	4310      	orrs	r0, r2
 8000fe8:	6118      	str	r0, [r3, #16]
 8000fea:	4770      	bx	lr
 8000fec:	40023800 	.word	0x40023800

08000ff0 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <RCC_AHB2PeriphResetCmd+0x14>)
 8000ff2:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ff4:	b919      	cbnz	r1, 8000ffe <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000ff6:	ea22 0000 	bic.w	r0, r2, r0
 8000ffa:	6158      	str	r0, [r3, #20]
 8000ffc:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000ffe:	4310      	orrs	r0, r2
 8001000:	6158      	str	r0, [r3, #20]
 8001002:	4770      	bx	lr
 8001004:	40023800 	.word	0x40023800

08001008 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <RCC_AHB3PeriphResetCmd+0x14>)
 800100a:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800100c:	b919      	cbnz	r1, 8001016 <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800100e:	ea22 0000 	bic.w	r0, r2, r0
 8001012:	6198      	str	r0, [r3, #24]
 8001014:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001016:	4310      	orrs	r0, r2
 8001018:	6198      	str	r0, [r3, #24]
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800

08001020 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <RCC_APB1PeriphResetCmd+0x14>)
 8001022:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001024:	b919      	cbnz	r1, 800102e <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001026:	ea22 0000 	bic.w	r0, r2, r0
 800102a:	6218      	str	r0, [r3, #32]
 800102c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800102e:	4310      	orrs	r0, r2
 8001030:	6218      	str	r0, [r3, #32]
 8001032:	4770      	bx	lr
 8001034:	40023800 	.word	0x40023800

08001038 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <RCC_APB2PeriphResetCmd+0x14>)
 800103a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800103c:	b919      	cbnz	r1, 8001046 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800103e:	ea22 0000 	bic.w	r0, r2, r0
 8001042:	6258      	str	r0, [r3, #36]	; 0x24
 8001044:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001046:	4310      	orrs	r0, r2
 8001048:	6258      	str	r0, [r3, #36]	; 0x24
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800

08001050 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8001052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001054:	b919      	cbnz	r1, 800105e <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001056:	ea22 0000 	bic.w	r0, r2, r0
 800105a:	6518      	str	r0, [r3, #80]	; 0x50
 800105c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800105e:	4310      	orrs	r0, r2
 8001060:	6518      	str	r0, [r3, #80]	; 0x50
 8001062:	4770      	bx	lr
 8001064:	40023800 	.word	0x40023800

08001068 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 800106a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800106c:	b919      	cbnz	r1, 8001076 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800106e:	ea22 0000 	bic.w	r0, r2, r0
 8001072:	6558      	str	r0, [r3, #84]	; 0x54
 8001074:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001076:	4310      	orrs	r0, r2
 8001078:	6558      	str	r0, [r3, #84]	; 0x54
 800107a:	4770      	bx	lr
 800107c:	40023800 	.word	0x40023800

08001080 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8001082:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001084:	b919      	cbnz	r1, 800108e <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001086:	ea22 0000 	bic.w	r0, r2, r0
 800108a:	6598      	str	r0, [r3, #88]	; 0x58
 800108c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800108e:	4310      	orrs	r0, r2
 8001090:	6598      	str	r0, [r3, #88]	; 0x58
 8001092:	4770      	bx	lr
 8001094:	40023800 	.word	0x40023800

08001098 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <RCC_APB1PeriphClockLPModeCmd+0x14>)
 800109a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800109c:	b919      	cbnz	r1, 80010a6 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800109e:	ea22 0000 	bic.w	r0, r2, r0
 80010a2:	6618      	str	r0, [r3, #96]	; 0x60
 80010a4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80010a6:	4310      	orrs	r0, r2
 80010a8:	6618      	str	r0, [r3, #96]	; 0x60
 80010aa:	4770      	bx	lr
 80010ac:	40023800 	.word	0x40023800

080010b0 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 80010b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010b4:	b919      	cbnz	r1, 80010be <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80010b6:	ea22 0000 	bic.w	r0, r2, r0
 80010ba:	6658      	str	r0, [r3, #100]	; 0x64
 80010bc:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80010be:	4310      	orrs	r0, r2
 80010c0:	6658      	str	r0, [r3, #100]	; 0x64
 80010c2:	4770      	bx	lr
 80010c4:	40023800 	.word	0x40023800

080010c8 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <RCC_ITConfig+0x14>)
 80010ca:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010cc:	b919      	cbnz	r1, 80010d6 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80010ce:	ea22 0000 	bic.w	r0, r2, r0
 80010d2:	7018      	strb	r0, [r3, #0]
 80010d4:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80010d6:	4310      	orrs	r0, r2
 80010d8:	7018      	strb	r0, [r3, #0]
 80010da:	4770      	bx	lr
 80010dc:	4002380d 	.word	0x4002380d

080010e0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80010e0:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d00b      	beq.n	80010fe <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80010e6:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <RCC_GetFlagStatus+0x30>)
 80010ea:	bf0c      	ite	eq
 80010ec:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80010ee:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80010f0:	f000 001f 	and.w	r0, r0, #31
 80010f4:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80010f8:	f000 0001 	and.w	r0, r0, #1
 80010fc:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <RCC_GetFlagStatus+0x30>)
 8001100:	681b      	ldr	r3, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001102:	f000 001f 	and.w	r0, r0, #31
 8001106:	fa23 f000 	lsr.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 800110a:	f000 0001 	and.w	r0, r0, #1
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800

08001114 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <RCC_ClearFlag+0xc>)
 8001116:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001118:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800111c:	675a      	str	r2, [r3, #116]	; 0x74
 800111e:	4770      	bx	lr
 8001120:	40023800 	.word	0x40023800

08001124 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <RCC_GetITStatus+0x10>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 800112a:	bf0c      	ite	eq
 800112c:	2000      	moveq	r0, #0
 800112e:	2001      	movne	r0, #1
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001138:	4b01      	ldr	r3, [pc, #4]	; (8001140 <RCC_ClearITPendingBit+0x8>)
 800113a:	7018      	strb	r0, [r3, #0]
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	4002380e 	.word	0x4002380e

08001144 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001144:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <GPIO_DeInit+0x130>)
 8001148:	4298      	cmp	r0, r3
 800114a:	d02a      	beq.n	80011a2 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800114c:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <GPIO_DeInit+0x134>)
 800114e:	4298      	cmp	r0, r3
 8001150:	d031      	beq.n	80011b6 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8001152:	4b4a      	ldr	r3, [pc, #296]	; (800127c <GPIO_DeInit+0x138>)
 8001154:	4298      	cmp	r0, r3
 8001156:	d038      	beq.n	80011ca <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8001158:	4b49      	ldr	r3, [pc, #292]	; (8001280 <GPIO_DeInit+0x13c>)
 800115a:	4298      	cmp	r0, r3
 800115c:	d03f      	beq.n	80011de <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <GPIO_DeInit+0x140>)
 8001160:	4298      	cmp	r0, r3
 8001162:	d046      	beq.n	80011f2 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <GPIO_DeInit+0x144>)
 8001166:	4298      	cmp	r0, r3
 8001168:	d04d      	beq.n	8001206 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 800116a:	4b48      	ldr	r3, [pc, #288]	; (800128c <GPIO_DeInit+0x148>)
 800116c:	4298      	cmp	r0, r3
 800116e:	d054      	beq.n	800121a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8001170:	4b47      	ldr	r3, [pc, #284]	; (8001290 <GPIO_DeInit+0x14c>)
 8001172:	4298      	cmp	r0, r3
 8001174:	d05b      	beq.n	800122e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <GPIO_DeInit+0x150>)
 8001178:	4298      	cmp	r0, r3
 800117a:	d062      	beq.n	8001242 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 800117c:	4b46      	ldr	r3, [pc, #280]	; (8001298 <GPIO_DeInit+0x154>)
 800117e:	4298      	cmp	r0, r3
 8001180:	d06b      	beq.n	800125a <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8001182:	4b46      	ldr	r3, [pc, #280]	; (800129c <GPIO_DeInit+0x158>)
 8001184:	4298      	cmp	r0, r3
 8001186:	d000      	beq.n	800118a <GPIO_DeInit+0x46>
 8001188:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800118a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800118e:	2101      	movs	r1, #1
 8001190:	f7ff ff22 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8001194:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001198:	2100      	movs	r1, #0
    }
  }
}
 800119a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 800119e:	f7ff bf1b 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80011a2:	2001      	movs	r0, #1
 80011a4:	4601      	mov	r1, r0
 80011a6:	f7ff ff17 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80011aa:	2001      	movs	r0, #1
 80011ac:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80011b2:	f7ff bf11 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80011b6:	2002      	movs	r0, #2
 80011b8:	2101      	movs	r1, #1
 80011ba:	f7ff ff0d 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80011be:	2002      	movs	r0, #2
 80011c0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80011c6:	f7ff bf07 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80011ca:	2004      	movs	r0, #4
 80011cc:	2101      	movs	r1, #1
 80011ce:	f7ff ff03 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80011d2:	2004      	movs	r0, #4
 80011d4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80011da:	f7ff befd 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80011de:	2008      	movs	r0, #8
 80011e0:	2101      	movs	r1, #1
 80011e2:	f7ff fef9 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80011e6:	2008      	movs	r0, #8
 80011e8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80011ee:	f7ff bef3 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80011f2:	2010      	movs	r0, #16
 80011f4:	2101      	movs	r1, #1
 80011f6:	f7ff feef 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80011fa:	2010      	movs	r0, #16
 80011fc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80011fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8001202:	f7ff bee9 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8001206:	2020      	movs	r0, #32
 8001208:	2101      	movs	r1, #1
 800120a:	f7ff fee5 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800120e:	2020      	movs	r0, #32
 8001210:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8001216:	f7ff bedf 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800121a:	2040      	movs	r0, #64	; 0x40
 800121c:	2101      	movs	r1, #1
 800121e:	f7ff fedb 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001222:	2040      	movs	r0, #64	; 0x40
 8001224:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800122a:	f7ff bed5 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800122e:	2080      	movs	r0, #128	; 0x80
 8001230:	2101      	movs	r1, #1
 8001232:	f7ff fed1 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001236:	2080      	movs	r0, #128	; 0x80
 8001238:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800123a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800123e:	f7ff becb 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8001242:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001246:	2101      	movs	r1, #1
 8001248:	f7ff fec6 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800124c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001250:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8001252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001256:	f7ff bebf 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800125a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800125e:	2101      	movs	r1, #1
 8001260:	f7ff feba 	bl	8000fd8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8001264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001268:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800126a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800126e:	f7ff beb3 	b.w	8000fd8 <RCC_AHB1PeriphResetCmd>
 8001272:	bf00      	nop
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40021000 	.word	0x40021000
 8001288:	40021400 	.word	0x40021400
 800128c:	40021800 	.word	0x40021800
 8001290:	40021c00 	.word	0x40021c00
 8001294:	40022000 	.word	0x40022000
 8001298:	40022400 	.word	0x40022400
 800129c:	40022800 	.word	0x40022800

080012a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80012a0:	2200      	movs	r2, #0
 80012a2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012a6:	4613      	mov	r3, r2
 80012a8:	680e      	ldr	r6, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80012aa:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80012ac:	f04f 0803 	mov.w	r8, #3
 80012b0:	e004      	b.n	80012bc <GPIO_Init+0x1c>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012b2:	3301      	adds	r3, #1
 80012b4:	2b10      	cmp	r3, #16
 80012b6:	f102 0202 	add.w	r2, r2, #2
 80012ba:	d02c      	beq.n	8001316 <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80012bc:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80012c0:	ea04 0506 	and.w	r5, r4, r6

    if (currentpin == pos)
 80012c4:	42a5      	cmp	r5, r4
 80012c6:	d1f4      	bne.n	80012b2 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80012c8:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012cc:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80012d0:	fa08 f402 	lsl.w	r4, r8, r2
 80012d4:	43e4      	mvns	r4, r4
 80012d6:	ea04 0909 	and.w	r9, r4, r9
 80012da:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012de:	f8d0 9000 	ldr.w	r9, [r0]
 80012e2:	fa0c fa02 	lsl.w	sl, ip, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012e6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012ea:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012ee:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012f2:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012f6:	d911      	bls.n	800131c <GPIO_Init+0x7c>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80012f8:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80012fa:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80012fe:	402c      	ands	r4, r5
 8001300:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001302:	68c5      	ldr	r5, [r0, #12]
 8001304:	fa0c f402 	lsl.w	r4, ip, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001308:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800130a:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800130c:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800130e:	60c4      	str	r4, [r0, #12]
 8001310:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001314:	d1d2      	bne.n	80012bc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001316:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800131a:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800131c:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001320:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001324:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001328:	ea04 0a0a 	and.w	sl, r4, sl
 800132c:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001330:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001334:	fa09 f902 	lsl.w	r9, r9, r2
 8001338:	ea49 090a 	orr.w	r9, r9, sl
 800133c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001340:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001344:	ea29 0505 	bic.w	r5, r9, r5
 8001348:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800134a:	6845      	ldr	r5, [r0, #4]
 800134c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001350:	fa1f fc8c 	uxth.w	ip, ip
 8001354:	ea4c 0505 	orr.w	r5, ip, r5
 8001358:	6045      	str	r5, [r0, #4]
 800135a:	e7cd      	b.n	80012f8 <GPIO_Init+0x58>

0800135c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800135c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800135e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001362:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001364:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001366:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001368:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800136a:	71c3      	strb	r3, [r0, #7]
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001376:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	430b      	orrs	r3, r1
 800137c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800137e:	9b01      	ldr	r3, [sp, #4]
 8001380:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001382:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001384:	9b01      	ldr	r3, [sp, #4]
 8001386:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001388:	69c3      	ldr	r3, [r0, #28]
 800138a:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800138c:	69c3      	ldr	r3, [r0, #28]
 800138e:	9301      	str	r3, [sp, #4]
}
 8001390:	b002      	add	sp, #8
 8001392:	4770      	bx	lr

08001394 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001394:	6903      	ldr	r3, [r0, #16]
 8001396:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001398:	bf0c      	ite	eq
 800139a:	2000      	moveq	r0, #0
 800139c:	2001      	movne	r0, #1
 800139e:	4770      	bx	lr

080013a0 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80013a0:	6900      	ldr	r0, [r0, #16]
}
 80013a2:	b280      	uxth	r0, r0
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80013a8:	6943      	ldr	r3, [r0, #20]
 80013aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80013ac:	bf0c      	ite	eq
 80013ae:	2000      	moveq	r0, #0
 80013b0:	2001      	movne	r0, #1
 80013b2:	4770      	bx	lr

080013b4 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80013b4:	6940      	ldr	r0, [r0, #20]
}
 80013b6:	b280      	uxth	r0, r0
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80013bc:	8301      	strh	r1, [r0, #24]
 80013be:	4770      	bx	lr

080013c0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80013c0:	8341      	strh	r1, [r0, #26]
 80013c2:	4770      	bx	lr

080013c4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80013c4:	b90a      	cbnz	r2, 80013ca <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80013c6:	8341      	strh	r1, [r0, #26]
 80013c8:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80013ca:	8301      	strh	r1, [r0, #24]
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80013d0:	6141      	str	r1, [r0, #20]
 80013d2:	4770      	bx	lr

080013d4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80013d4:	6943      	ldr	r3, [r0, #20]
 80013d6:	4059      	eors	r1, r3
 80013d8:	6141      	str	r1, [r0, #20]
 80013da:	4770      	bx	lr

080013dc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80013dc:	08cb      	lsrs	r3, r1, #3
 80013de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80013e2:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80013e6:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80013e8:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80013ea:	6a04      	ldr	r4, [r0, #32]
 80013ec:	230f      	movs	r3, #15
 80013ee:	408b      	lsls	r3, r1
 80013f0:	ea24 0303 	bic.w	r3, r4, r3
 80013f4:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80013f6:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80013f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80013fc:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80013fe:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001400:	6203      	str	r3, [r0, #32]
}
 8001402:	4770      	bx	lr

08001404 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001404:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001406:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <USART_DeInit+0xec>)
 8001408:	4298      	cmp	r0, r3
 800140a:	d021      	beq.n	8001450 <USART_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <USART_DeInit+0xf0>)
 800140e:	4298      	cmp	r0, r3
 8001410:	d028      	beq.n	8001464 <USART_DeInit+0x60>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <USART_DeInit+0xf4>)
 8001414:	4298      	cmp	r0, r3
 8001416:	d031      	beq.n	800147c <USART_DeInit+0x78>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <USART_DeInit+0xf8>)
 800141a:	4298      	cmp	r0, r3
 800141c:	d03a      	beq.n	8001494 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <USART_DeInit+0xfc>)
 8001420:	4298      	cmp	r0, r3
 8001422:	d043      	beq.n	80014ac <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <USART_DeInit+0x100>)
 8001426:	4298      	cmp	r0, r3
 8001428:	d04c      	beq.n	80014c4 <USART_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <USART_DeInit+0x104>)
 800142c:	4298      	cmp	r0, r3
 800142e:	d053      	beq.n	80014d8 <USART_DeInit+0xd4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <USART_DeInit+0x108>)
 8001432:	4298      	cmp	r0, r3
 8001434:	d000      	beq.n	8001438 <USART_DeInit+0x34>
 8001436:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8001438:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800143c:	2101      	movs	r1, #1
 800143e:	f7ff fdef 	bl	8001020 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8001442:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001446:	2100      	movs	r1, #0
    }
  }
}
 8001448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 800144c:	f7ff bde8 	b.w	8001020 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001450:	2010      	movs	r0, #16
 8001452:	2101      	movs	r1, #1
 8001454:	f7ff fdf0 	bl	8001038 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001458:	2010      	movs	r0, #16
 800145a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800145c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001460:	f7ff bdea 	b.w	8001038 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001464:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001468:	2101      	movs	r1, #1
 800146a:	f7ff fdd9 	bl	8001020 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800146e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001472:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8001474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001478:	f7ff bdd2 	b.w	8001020 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800147c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001480:	2101      	movs	r1, #1
 8001482:	f7ff fdcd 	bl	8001020 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001486:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800148a:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 800148c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001490:	f7ff bdc6 	b.w	8001020 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001494:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001498:	2101      	movs	r1, #1
 800149a:	f7ff fdc1 	bl	8001020 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800149e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014a2:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80014a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80014a8:	f7ff bdba 	b.w	8001020 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80014ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014b0:	2101      	movs	r1, #1
 80014b2:	f7ff fdb5 	bl	8001020 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80014b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80014ba:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80014bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80014c0:	f7ff bdae 	b.w	8001020 <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80014c4:	2020      	movs	r0, #32
 80014c6:	2101      	movs	r1, #1
 80014c8:	f7ff fdb6 	bl	8001038 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80014cc:	2020      	movs	r0, #32
 80014ce:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80014d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80014d4:	f7ff bdb0 	b.w	8001038 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 80014d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014dc:	2101      	movs	r1, #1
 80014de:	f7ff fd9f 	bl	8001020 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 80014e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014e6:	2100      	movs	r1, #0
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 80014e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 80014ec:	f7ff bd98 	b.w	8001020 <RCC_APB1PeriphResetCmd>
 80014f0:	40011000 	.word	0x40011000
 80014f4:	40004400 	.word	0x40004400
 80014f8:	40004800 	.word	0x40004800
 80014fc:	40004c00 	.word	0x40004c00
 8001500:	40005000 	.word	0x40005000
 8001504:	40011400 	.word	0x40011400
 8001508:	40007800 	.word	0x40007800
 800150c:	40007c00 	.word	0x40007c00

08001510 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001514:	8a01      	ldrh	r1, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001516:	88ef      	ldrh	r7, [r5, #6]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001518:	892e      	ldrh	r6, [r5, #8]
 800151a:	88ab      	ldrh	r3, [r5, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800151c:	89aa      	ldrh	r2, [r5, #12]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800151e:	b289      	uxth	r1, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001520:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001522:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001526:	4339      	orrs	r1, r7

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001528:	8968      	ldrh	r0, [r5, #10]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800152a:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800152c:	89a1      	ldrh	r1, [r4, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800152e:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001530:	b289      	uxth	r1, r1

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001532:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001534:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001538:	f021 010c 	bic.w	r1, r1, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800153c:	b29b      	uxth	r3, r3
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800153e:	430b      	orrs	r3, r1
 8001540:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001542:	8aa3      	ldrh	r3, [r4, #20]
 8001544:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800154a:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800154c:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800154e:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001550:	4668      	mov	r0, sp
 8001552:	f7ff fc4f 	bl	8000df4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <USART_Init+0xbc>)
 8001558:	429c      	cmp	r4, r3
 800155a:	d029      	beq.n	80015b0 <USART_Init+0xa0>
 800155c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001560:	429c      	cmp	r4, r3
 8001562:	d025      	beq.n	80015b0 <USART_Init+0xa0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001564:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001566:	89a2      	ldrh	r2, [r4, #12]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001568:	6829      	ldr	r1, [r5, #0]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800156a:	89a0      	ldrh	r0, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800156c:	b212      	sxth	r2, r2
 800156e:	2a00      	cmp	r2, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001570:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001574:	bfb4      	ite	lt
 8001576:	0049      	lsllt	r1, r1, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001578:	0089      	lslge	r1, r1, #2
 800157a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800157e:	fbb3 f2f1 	udiv	r2, r3, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8001582:	4913      	ldr	r1, [pc, #76]	; (80015d0 <USART_Init+0xc0>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001584:	b200      	sxth	r0, r0
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8001586:	fba1 5302 	umull	r5, r3, r1, r2
 800158a:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800158c:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800158e:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001590:	fb03 2215 	mls	r2, r3, r5, r2
 8001594:	ea4f 1303 	mov.w	r3, r3, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001598:	db0c      	blt.n	80015b4 <USART_Init+0xa4>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	3232      	adds	r2, #50	; 0x32
 800159e:	fba1 5102 	umull	r5, r1, r1, r2
 80015a2:	f3c1 1143 	ubfx	r1, r1, #5, #4
 80015a6:	430b      	orrs	r3, r1
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	8123      	strh	r3, [r4, #8]
}
 80015ac:	b005      	add	sp, #20
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80015b0:	9b03      	ldr	r3, [sp, #12]
 80015b2:	e7d8      	b.n	8001566 <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80015b4:	00d2      	lsls	r2, r2, #3
 80015b6:	3232      	adds	r2, #50	; 0x32
 80015b8:	fba1 0102 	umull	r0, r1, r1, r2
 80015bc:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80015c0:	430b      	orrs	r3, r1
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	8123      	strh	r3, [r4, #8]
}
 80015c6:	b005      	add	sp, #20
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40011000 	.word	0x40011000
 80015d0:	51eb851f 	.word	0x51eb851f

080015d4 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80015d4:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80015d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80015da:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80015dc:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80015de:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80015e0:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80015e2:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80015e4:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80015e6:	8183      	strh	r3, [r0, #12]
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80015ec:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80015ee:	880a      	ldrh	r2, [r1, #0]
 80015f0:	884d      	ldrh	r5, [r1, #2]
 80015f2:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80015f4:	8a03      	ldrh	r3, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80015f6:	88c9      	ldrh	r1, [r1, #6]
 80015f8:	432a      	orrs	r2, r5
 80015fa:	4322      	orrs	r2, r4
 80015fc:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80015fe:	b29b      	uxth	r3, r3
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001600:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001602:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001606:	4313      	orrs	r3, r2
 8001608:	8203      	strh	r3, [r0, #16]
}
 800160a:	bc30      	pop	{r4, r5}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001610:	2300      	movs	r3, #0
 8001612:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001614:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001616:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001618:	80c3      	strh	r3, [r0, #6]
 800161a:	4770      	bx	lr

0800161c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800161c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800161e:	b929      	cbnz	r1, 800162c <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	8183      	strh	r3, [r0, #12]
 800162a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800162c:	b29b      	uxth	r3, r3
 800162e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001632:	8183      	strh	r3, [r0, #12]
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop

08001638 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8001638:	8b03      	ldrh	r3, [r0, #24]
 800163a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800163e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001640:	8b03      	ldrh	r3, [r0, #24]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4319      	orrs	r1, r3
 8001646:	8301      	strh	r1, [r0, #24]
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop

0800164c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800164c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800164e:	b919      	cbnz	r1, 8001658 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8001650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001654:	8183      	strh	r3, [r0, #12]
 8001656:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800165c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001660:	b29b      	uxth	r3, r3
 8001662:	8183      	strh	r3, [r0, #12]
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop

08001668 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001668:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800166a:	b929      	cbnz	r1, 8001678 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800166c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	8283      	strh	r3, [r0, #20]
 8001676:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001678:	b29b      	uxth	r3, r3
 800167a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167e:	8283      	strh	r3, [r0, #20]
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001684:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001688:	8081      	strh	r1, [r0, #4]
 800168a:	4770      	bx	lr

0800168c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800168c:	8880      	ldrh	r0, [r0, #4]
}
 800168e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001692:	4770      	bx	lr

08001694 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001694:	8a03      	ldrh	r3, [r0, #16]
 8001696:	f023 030f 	bic.w	r3, r3, #15
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	0c1b      	lsrs	r3, r3, #16
 800169e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80016a0:	8a03      	ldrh	r3, [r0, #16]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4319      	orrs	r1, r3
 80016a6:	8201      	strh	r1, [r0, #16]
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80016ac:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80016ae:	b929      	cbnz	r1, 80016bc <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80016b0:	f023 0302 	bic.w	r3, r3, #2
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	0c1b      	lsrs	r3, r3, #16
 80016b8:	8183      	strh	r3, [r0, #12]
 80016ba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	8183      	strh	r3, [r0, #12]
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80016c8:	8983      	ldrh	r3, [r0, #12]
 80016ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	0c1b      	lsrs	r3, r3, #16
 80016d2:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80016d4:	8983      	ldrh	r3, [r0, #12]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4319      	orrs	r1, r3
 80016da:	8181      	strh	r1, [r0, #12]
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 80016e0:	8a03      	ldrh	r3, [r0, #16]
 80016e2:	f023 0320 	bic.w	r3, r3, #32
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80016ec:	8a03      	ldrh	r3, [r0, #16]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4319      	orrs	r1, r3
 80016f2:	8201      	strh	r1, [r0, #16]
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80016f8:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016fa:	b929      	cbnz	r1, 8001708 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80016fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	0c1b      	lsrs	r3, r3, #16
 8001704:	8203      	strh	r3, [r0, #16]
 8001706:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001708:	b29b      	uxth	r3, r3
 800170a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170e:	8203      	strh	r3, [r0, #16]
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8001714:	8983      	ldrh	r3, [r0, #12]
 8001716:	b29b      	uxth	r3, r3
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	8183      	strh	r3, [r0, #12]
 800171e:	4770      	bx	lr

08001720 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001720:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001722:	b929      	cbnz	r1, 8001730 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8001724:	f023 0308 	bic.w	r3, r3, #8
 8001728:	041b      	lsls	r3, r3, #16
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	8283      	strh	r3, [r0, #20]
 800172e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001730:	b29b      	uxth	r3, r3
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	8283      	strh	r3, [r0, #20]
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800173c:	8b03      	ldrh	r3, [r0, #24]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8001742:	8b03      	ldrh	r3, [r0, #24]
 8001744:	b29b      	uxth	r3, r3
 8001746:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800174a:	8301      	strh	r1, [r0, #24]
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001750:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001752:	b929      	cbnz	r1, 8001760 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8001754:	f023 0320 	bic.w	r3, r3, #32
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	8283      	strh	r3, [r0, #20]
 800175e:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001760:	b29b      	uxth	r3, r3
 8001762:	f043 0320 	orr.w	r3, r3, #32
 8001766:	8283      	strh	r3, [r0, #20]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800176c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800176e:	b929      	cbnz	r1, 800177c <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001770:	f023 0310 	bic.w	r3, r3, #16
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	8283      	strh	r3, [r0, #20]
 800177a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800177c:	b29b      	uxth	r3, r3
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	8283      	strh	r3, [r0, #20]
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop

08001788 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001788:	8a83      	ldrh	r3, [r0, #20]
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001794:	8a83      	ldrh	r3, [r0, #20]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4319      	orrs	r1, r3
 800179a:	8281      	strh	r1, [r0, #20]
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop

080017a0 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80017a0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80017a2:	b929      	cbnz	r1, 80017b0 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80017a4:	f023 0302 	bic.w	r3, r3, #2
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	8283      	strh	r3, [r0, #20]
 80017ae:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	8283      	strh	r3, [r0, #20]
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80017bc:	8a83      	ldrh	r3, [r0, #20]
 80017be:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80017c0:	b91a      	cbnz	r2, 80017ca <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80017c2:	ea23 0101 	bic.w	r1, r3, r1
 80017c6:	8281      	strh	r1, [r0, #20]
 80017c8:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80017ca:	4319      	orrs	r1, r3
 80017cc:	8281      	strh	r1, [r0, #20]
 80017ce:	4770      	bx	lr

080017d0 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80017d0:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80017d4:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80017d6:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80017da:	2401      	movs	r4, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80017dc:	42a1      	cmp	r1, r4
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80017de:	fa04 f303 	lsl.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80017e2:	d010      	beq.n	8001806 <USART_ITConfig+0x36>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80017e4:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 80017e6:	bf0c      	ite	eq
 80017e8:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80017ea:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017ec:	6804      	ldr	r4, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 80017ee:	b92a      	cbnz	r2, 80017fc <USART_ITConfig+0x2c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017f0:	ea24 0303 	bic.w	r3, r4, r3
 80017f4:	6003      	str	r3, [r0, #0]
  }
}
 80017f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017fa:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017fc:	4323      	orrs	r3, r4
 80017fe:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001804:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8001806:	300c      	adds	r0, #12
 8001808:	e7f0      	b.n	80017ec <USART_ITConfig+0x1c>
 800180a:	bf00      	nop

0800180c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800180c:	8803      	ldrh	r3, [r0, #0]
 800180e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001810:	bf0c      	ite	eq
 8001812:	2000      	moveq	r0, #0
 8001814:	2001      	movne	r0, #1
 8001816:	4770      	bx	lr

08001818 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8001818:	43c9      	mvns	r1, r1
 800181a:	b289      	uxth	r1, r1
 800181c:	8001      	strh	r1, [r0, #0]
 800181e:	4770      	bx	lr

08001820 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001820:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001822:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001826:	2401      	movs	r4, #1
 8001828:	f001 021f 	and.w	r2, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800182c:	42a3      	cmp	r3, r4
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 800182e:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001832:	d017      	beq.n	8001864 <USART_GetITStatus+0x44>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001834:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8001836:	bf0c      	ite	eq
 8001838:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800183a:	8a83      	ldrhne	r3, [r0, #20]
 800183c:	b29b      	uxth	r3, r3
 800183e:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8001840:	8802      	ldrh	r2, [r0, #0]
 8001842:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001844:	b153      	cbz	r3, 800185c <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8001846:	0a09      	lsrs	r1, r1, #8
 8001848:	2301      	movs	r3, #1
 800184a:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800184e:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 8001850:	bf0c      	ite	eq
 8001852:	2000      	moveq	r0, #0
 8001854:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8001856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800185a:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800185c:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 800185e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001862:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8001864:	8983      	ldrh	r3, [r0, #12]
 8001866:	b29b      	uxth	r3, r3
 8001868:	4013      	ands	r3, r2
 800186a:	e7e9      	b.n	8001840 <USART_GetITStatus+0x20>

0800186c <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800186c:	0a09      	lsrs	r1, r1, #8
 800186e:	2301      	movs	r3, #1
 8001870:	fa03 f101 	lsl.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8001874:	43c9      	mvns	r1, r1
 8001876:	b289      	uxth	r1, r1
 8001878:	8001      	strh	r1, [r0, #0]
 800187a:	4770      	bx	lr

0800187c <main>:
		print_fun(",");
	}*/
	print_fun("%04x",0xAA55);
	print_fun("\n\r");
}
int main(void) {
 800187c:	b570      	push	{r4, r5, r6, lr}
 800187e:	b082      	sub	sp, #8
	timer_init();
 8001880:	f7ff f878 	bl	8000974 <timer_init>
	LED_setup();
 8001884:	f7fe fcb2 	bl	80001ec <LED_setup>
	setup_Periph();
 8001888:	f7fe fcc8 	bl	800021c <setup_Periph>
	float hum,tmp;
	int expect = 1;
	
	print_fun("Hello World! %d %d %d %c\n\r",1,3,4,'A');
 800188c:	2341      	movs	r3, #65	; 0x41
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	2203      	movs	r2, #3
 8001894:	2304      	movs	r3, #4
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <main+0x58>)
 8001898:	4c0f      	ldr	r4, [pc, #60]	; (80018d8 <main+0x5c>)
 800189a:	4e10      	ldr	r6, [pc, #64]	; (80018dc <main+0x60>)
 800189c:	f7fe fd3a 	bl	8000314 <print_fun>

	initAll();
 80018a0:	f7ff f8fe 	bl	8000aa0 <initAll>
	while(1){
		//loop_fun();
		//print_fun("start.....\n");
		printf("cmd is now %d\n",CMD);
		delay_us(200000);
		if(CMD == 1){
 80018a4:	4625      	mov	r5, r4
 80018a6:	7821      	ldrb	r1, [r4, #0]
 80018a8:	e001      	b.n	80018ae <main+0x32>
			loop_fun();
		}
		if(CMD == 2){
 80018aa:	2902      	cmp	r1, #2
 80018ac:	d00d      	beq.n	80018ca <main+0x4e>
	initAll();
	
	while(1){
		//loop_fun();
		//print_fun("start.....\n");
		printf("cmd is now %d\n",CMD);
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <main+0x64>)
 80018b0:	f000 f822 	bl	80018f8 <iprintf>
		delay_us(200000);
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <main+0x68>)
 80018b6:	f7ff f841 	bl	800093c <delay_us>
		if(CMD == 1){
 80018ba:	7821      	ldrb	r1, [r4, #0]
 80018bc:	2901      	cmp	r1, #1
 80018be:	d1f4      	bne.n	80018aa <main+0x2e>
			loop_fun();
 80018c0:	f7fe fd40 	bl	8000344 <loop_fun>
 80018c4:	7829      	ldrb	r1, [r5, #0]
		}
		if(CMD == 2){
 80018c6:	2902      	cmp	r1, #2
 80018c8:	d1f1      	bne.n	80018ae <main+0x32>
			test(testID);
 80018ca:	7830      	ldrb	r0, [r6, #0]
 80018cc:	f7fe fd8e 	bl	80003ec <test>
 80018d0:	e7e9      	b.n	80018a6 <main+0x2a>
 80018d2:	bf00      	nop
 80018d4:	08002c88 	.word	0x08002c88
 80018d8:	2000011d 	.word	0x2000011d
 80018dc:	2000011c 	.word	0x2000011c
 80018e0:	08002ca4 	.word	0x08002ca4
 80018e4:	00030d40 	.word	0x00030d40

080018e8 <memset>:
 80018e8:	4402      	add	r2, r0
 80018ea:	4603      	mov	r3, r0
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d002      	beq.n	80018f6 <memset+0xe>
 80018f0:	f803 1b01 	strb.w	r1, [r3], #1
 80018f4:	e7fa      	b.n	80018ec <memset+0x4>
 80018f6:	4770      	bx	lr

080018f8 <iprintf>:
 80018f8:	b40f      	push	{r0, r1, r2, r3}
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <iprintf+0x2c>)
 80018fc:	b513      	push	{r0, r1, r4, lr}
 80018fe:	681c      	ldr	r4, [r3, #0]
 8001900:	b124      	cbz	r4, 800190c <iprintf+0x14>
 8001902:	69a3      	ldr	r3, [r4, #24]
 8001904:	b913      	cbnz	r3, 800190c <iprintf+0x14>
 8001906:	4620      	mov	r0, r4
 8001908:	f000 fcaa 	bl	8002260 <__sinit>
 800190c:	ab05      	add	r3, sp, #20
 800190e:	4620      	mov	r0, r4
 8001910:	68a1      	ldr	r1, [r4, #8]
 8001912:	9a04      	ldr	r2, [sp, #16]
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	f000 f82f 	bl	8001978 <_vfiprintf_r>
 800191a:	b002      	add	sp, #8
 800191c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001920:	b004      	add	sp, #16
 8001922:	4770      	bx	lr
 8001924:	200000ec 	.word	0x200000ec

08001928 <__sfputc_r>:
 8001928:	6893      	ldr	r3, [r2, #8]
 800192a:	3b01      	subs	r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	b510      	push	{r4, lr}
 8001930:	6093      	str	r3, [r2, #8]
 8001932:	da05      	bge.n	8001940 <__sfputc_r+0x18>
 8001934:	6994      	ldr	r4, [r2, #24]
 8001936:	42a3      	cmp	r3, r4
 8001938:	db08      	blt.n	800194c <__sfputc_r+0x24>
 800193a:	b2cb      	uxtb	r3, r1
 800193c:	2b0a      	cmp	r3, #10
 800193e:	d005      	beq.n	800194c <__sfputc_r+0x24>
 8001940:	6813      	ldr	r3, [r2, #0]
 8001942:	1c58      	adds	r0, r3, #1
 8001944:	6010      	str	r0, [r2, #0]
 8001946:	7019      	strb	r1, [r3, #0]
 8001948:	b2c8      	uxtb	r0, r1
 800194a:	bd10      	pop	{r4, pc}
 800194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001950:	f000 bac2 	b.w	8001ed8 <__swbuf_r>

08001954 <__sfputs_r>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	4605      	mov	r5, r0
 8001958:	460e      	mov	r6, r1
 800195a:	4614      	mov	r4, r2
 800195c:	18d7      	adds	r7, r2, r3
 800195e:	42bc      	cmp	r4, r7
 8001960:	d008      	beq.n	8001974 <__sfputs_r+0x20>
 8001962:	4628      	mov	r0, r5
 8001964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001968:	4632      	mov	r2, r6
 800196a:	f7ff ffdd 	bl	8001928 <__sfputc_r>
 800196e:	1c43      	adds	r3, r0, #1
 8001970:	d1f5      	bne.n	800195e <__sfputs_r+0xa>
 8001972:	e000      	b.n	8001976 <__sfputs_r+0x22>
 8001974:	2000      	movs	r0, #0
 8001976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001978 <_vfiprintf_r>:
 8001978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800197c:	b09d      	sub	sp, #116	; 0x74
 800197e:	460d      	mov	r5, r1
 8001980:	4617      	mov	r7, r2
 8001982:	9303      	str	r3, [sp, #12]
 8001984:	4606      	mov	r6, r0
 8001986:	b118      	cbz	r0, 8001990 <_vfiprintf_r+0x18>
 8001988:	6983      	ldr	r3, [r0, #24]
 800198a:	b90b      	cbnz	r3, 8001990 <_vfiprintf_r+0x18>
 800198c:	f000 fc68 	bl	8002260 <__sinit>
 8001990:	4b73      	ldr	r3, [pc, #460]	; (8001b60 <_vfiprintf_r+0x1e8>)
 8001992:	429d      	cmp	r5, r3
 8001994:	d101      	bne.n	800199a <_vfiprintf_r+0x22>
 8001996:	6875      	ldr	r5, [r6, #4]
 8001998:	e008      	b.n	80019ac <_vfiprintf_r+0x34>
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <_vfiprintf_r+0x1ec>)
 800199c:	429d      	cmp	r5, r3
 800199e:	d101      	bne.n	80019a4 <_vfiprintf_r+0x2c>
 80019a0:	68b5      	ldr	r5, [r6, #8]
 80019a2:	e003      	b.n	80019ac <_vfiprintf_r+0x34>
 80019a4:	4b70      	ldr	r3, [pc, #448]	; (8001b68 <_vfiprintf_r+0x1f0>)
 80019a6:	429d      	cmp	r5, r3
 80019a8:	bf08      	it	eq
 80019aa:	68f5      	ldreq	r5, [r6, #12]
 80019ac:	89ab      	ldrh	r3, [r5, #12]
 80019ae:	0718      	lsls	r0, r3, #28
 80019b0:	d50a      	bpl.n	80019c8 <_vfiprintf_r+0x50>
 80019b2:	692b      	ldr	r3, [r5, #16]
 80019b4:	b143      	cbz	r3, 80019c8 <_vfiprintf_r+0x50>
 80019b6:	2300      	movs	r3, #0
 80019b8:	9309      	str	r3, [sp, #36]	; 0x24
 80019ba:	2320      	movs	r3, #32
 80019bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019c0:	2330      	movs	r3, #48	; 0x30
 80019c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019c6:	e038      	b.n	8001a3a <_vfiprintf_r+0xc2>
 80019c8:	4630      	mov	r0, r6
 80019ca:	4629      	mov	r1, r5
 80019cc:	f000 fad8 	bl	8001f80 <__swsetup_r>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d0f0      	beq.n	80019b6 <_vfiprintf_r+0x3e>
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019d8:	e0bf      	b.n	8001b5a <_vfiprintf_r+0x1e2>
 80019da:	9a03      	ldr	r2, [sp, #12]
 80019dc:	1d11      	adds	r1, r2, #4
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	9103      	str	r1, [sp, #12]
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	db70      	blt.n	8001ac8 <_vfiprintf_r+0x150>
 80019e6:	9207      	str	r2, [sp, #28]
 80019e8:	3401      	adds	r4, #1
 80019ea:	7823      	ldrb	r3, [r4, #0]
 80019ec:	2b2e      	cmp	r3, #46	; 0x2e
 80019ee:	d07d      	beq.n	8001aec <_vfiprintf_r+0x174>
 80019f0:	4f5e      	ldr	r7, [pc, #376]	; (8001b6c <_vfiprintf_r+0x1f4>)
 80019f2:	7821      	ldrb	r1, [r4, #0]
 80019f4:	4638      	mov	r0, r7
 80019f6:	2203      	movs	r2, #3
 80019f8:	f000 fcea 	bl	80023d0 <memchr>
 80019fc:	b130      	cbz	r0, 8001a0c <_vfiprintf_r+0x94>
 80019fe:	1bc7      	subs	r7, r0, r7
 8001a00:	9b04      	ldr	r3, [sp, #16]
 8001a02:	2040      	movs	r0, #64	; 0x40
 8001a04:	40b8      	lsls	r0, r7
 8001a06:	4303      	orrs	r3, r0
 8001a08:	9304      	str	r3, [sp, #16]
 8001a0a:	3401      	adds	r4, #1
 8001a0c:	7821      	ldrb	r1, [r4, #0]
 8001a0e:	4858      	ldr	r0, [pc, #352]	; (8001b70 <_vfiprintf_r+0x1f8>)
 8001a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a14:	2206      	movs	r2, #6
 8001a16:	1c67      	adds	r7, r4, #1
 8001a18:	f000 fcda 	bl	80023d0 <memchr>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	f000 808a 	beq.w	8001b36 <_vfiprintf_r+0x1be>
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <_vfiprintf_r+0x1fc>)
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d17d      	bne.n	8001b24 <_vfiprintf_r+0x1ac>
 8001a28:	9b03      	ldr	r3, [sp, #12]
 8001a2a:	3307      	adds	r3, #7
 8001a2c:	f023 0307 	bic.w	r3, r3, #7
 8001a30:	3308      	adds	r3, #8
 8001a32:	9303      	str	r3, [sp, #12]
 8001a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a36:	4443      	add	r3, r8
 8001a38:	9309      	str	r3, [sp, #36]	; 0x24
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a42:	b91a      	cbnz	r2, 8001a4c <_vfiprintf_r+0xd4>
 8001a44:	ebb4 0907 	subs.w	r9, r4, r7
 8001a48:	d00e      	beq.n	8001a68 <_vfiprintf_r+0xf0>
 8001a4a:	e002      	b.n	8001a52 <_vfiprintf_r+0xda>
 8001a4c:	2a25      	cmp	r2, #37	; 0x25
 8001a4e:	d1f5      	bne.n	8001a3c <_vfiprintf_r+0xc4>
 8001a50:	e7f8      	b.n	8001a44 <_vfiprintf_r+0xcc>
 8001a52:	4630      	mov	r0, r6
 8001a54:	4629      	mov	r1, r5
 8001a56:	463a      	mov	r2, r7
 8001a58:	464b      	mov	r3, r9
 8001a5a:	f7ff ff7b 	bl	8001954 <__sfputs_r>
 8001a5e:	3001      	adds	r0, #1
 8001a60:	d076      	beq.n	8001b50 <_vfiprintf_r+0x1d8>
 8001a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a64:	444b      	add	r3, r9
 8001a66:	9309      	str	r3, [sp, #36]	; 0x24
 8001a68:	7823      	ldrb	r3, [r4, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d070      	beq.n	8001b50 <_vfiprintf_r+0x1d8>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a74:	9304      	str	r3, [sp, #16]
 8001a76:	9307      	str	r3, [sp, #28]
 8001a78:	9205      	str	r2, [sp, #20]
 8001a7a:	9306      	str	r3, [sp, #24]
 8001a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a80:	931a      	str	r3, [sp, #104]	; 0x68
 8001a82:	f104 0901 	add.w	r9, r4, #1
 8001a86:	464c      	mov	r4, r9
 8001a88:	4f3b      	ldr	r7, [pc, #236]	; (8001b78 <_vfiprintf_r+0x200>)
 8001a8a:	7821      	ldrb	r1, [r4, #0]
 8001a8c:	4638      	mov	r0, r7
 8001a8e:	2205      	movs	r2, #5
 8001a90:	f000 fc9e 	bl	80023d0 <memchr>
 8001a94:	f109 0901 	add.w	r9, r9, #1
 8001a98:	9b04      	ldr	r3, [sp, #16]
 8001a9a:	b128      	cbz	r0, 8001aa8 <_vfiprintf_r+0x130>
 8001a9c:	1bc7      	subs	r7, r0, r7
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	40b8      	lsls	r0, r7
 8001aa2:	4303      	orrs	r3, r0
 8001aa4:	9304      	str	r3, [sp, #16]
 8001aa6:	e7ee      	b.n	8001a86 <_vfiprintf_r+0x10e>
 8001aa8:	06d9      	lsls	r1, r3, #27
 8001aaa:	bf44      	itt	mi
 8001aac:	2220      	movmi	r2, #32
 8001aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ab2:	071a      	lsls	r2, r3, #28
 8001ab4:	bf44      	itt	mi
 8001ab6:	222b      	movmi	r2, #43	; 0x2b
 8001ab8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001abc:	7822      	ldrb	r2, [r4, #0]
 8001abe:	2a2a      	cmp	r2, #42	; 0x2a
 8001ac0:	d08b      	beq.n	80019da <_vfiprintf_r+0x62>
 8001ac2:	9b07      	ldr	r3, [sp, #28]
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	e005      	b.n	8001ad4 <_vfiprintf_r+0x15c>
 8001ac8:	4252      	negs	r2, r2
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	9207      	str	r2, [sp, #28]
 8001ad0:	9304      	str	r3, [sp, #16]
 8001ad2:	e789      	b.n	80019e8 <_vfiprintf_r+0x70>
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	3101      	adds	r1, #1
 8001ad8:	7822      	ldrb	r2, [r4, #0]
 8001ada:	3a30      	subs	r2, #48	; 0x30
 8001adc:	2a09      	cmp	r2, #9
 8001ade:	d803      	bhi.n	8001ae8 <_vfiprintf_r+0x170>
 8001ae0:	200a      	movs	r0, #10
 8001ae2:	fb00 2303 	mla	r3, r0, r3, r2
 8001ae6:	e7f5      	b.n	8001ad4 <_vfiprintf_r+0x15c>
 8001ae8:	9307      	str	r3, [sp, #28]
 8001aea:	e77e      	b.n	80019ea <_vfiprintf_r+0x72>
 8001aec:	7863      	ldrb	r3, [r4, #1]
 8001aee:	2b2a      	cmp	r3, #42	; 0x2a
 8001af0:	d10a      	bne.n	8001b08 <_vfiprintf_r+0x190>
 8001af2:	9b03      	ldr	r3, [sp, #12]
 8001af4:	1d1a      	adds	r2, r3, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	9203      	str	r2, [sp, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f104 0402 	add.w	r4, r4, #2
 8001b00:	bfb8      	it	lt
 8001b02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001b06:	e00b      	b.n	8001b20 <_vfiprintf_r+0x1a8>
 8001b08:	1c61      	adds	r1, r4, #1
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	3101      	adds	r1, #1
 8001b10:	7822      	ldrb	r2, [r4, #0]
 8001b12:	3a30      	subs	r2, #48	; 0x30
 8001b14:	2a09      	cmp	r2, #9
 8001b16:	d803      	bhi.n	8001b20 <_vfiprintf_r+0x1a8>
 8001b18:	200a      	movs	r0, #10
 8001b1a:	fb00 2303 	mla	r3, r0, r3, r2
 8001b1e:	e7f5      	b.n	8001b0c <_vfiprintf_r+0x194>
 8001b20:	9305      	str	r3, [sp, #20]
 8001b22:	e765      	b.n	80019f0 <_vfiprintf_r+0x78>
 8001b24:	ab03      	add	r3, sp, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4630      	mov	r0, r6
 8001b2a:	a904      	add	r1, sp, #16
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_vfiprintf_r+0x204>)
 8001b30:	f3af 8000 	nop.w
 8001b34:	e007      	b.n	8001b46 <_vfiprintf_r+0x1ce>
 8001b36:	ab03      	add	r3, sp, #12
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	4630      	mov	r0, r6
 8001b3c:	a904      	add	r1, sp, #16
 8001b3e:	462a      	mov	r2, r5
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <_vfiprintf_r+0x204>)
 8001b42:	f000 f88f 	bl	8001c64 <_printf_i>
 8001b46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	f47f af72 	bne.w	8001a34 <_vfiprintf_r+0xbc>
 8001b50:	89ab      	ldrh	r3, [r5, #12]
 8001b52:	065b      	lsls	r3, r3, #25
 8001b54:	f53f af3e 	bmi.w	80019d4 <_vfiprintf_r+0x5c>
 8001b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b5a:	b01d      	add	sp, #116	; 0x74
 8001b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b60:	08002ce8 	.word	0x08002ce8
 8001b64:	08002d08 	.word	0x08002d08
 8001b68:	08002d28 	.word	0x08002d28
 8001b6c:	08002cba 	.word	0x08002cba
 8001b70:	08002cbe 	.word	0x08002cbe
 8001b74:	00000000 	.word	0x00000000
 8001b78:	08002cb4 	.word	0x08002cb4
 8001b7c:	08001955 	.word	0x08001955

08001b80 <_printf_common>:
 8001b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b84:	4615      	mov	r5, r2
 8001b86:	461f      	mov	r7, r3
 8001b88:	688a      	ldr	r2, [r1, #8]
 8001b8a:	690b      	ldr	r3, [r1, #16]
 8001b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	bfa8      	it	ge
 8001b94:	4613      	movge	r3, r2
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b9c:	4606      	mov	r6, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	b10a      	cbz	r2, 8001ba6 <_printf_common+0x26>
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	602b      	str	r3, [r5, #0]
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	0699      	lsls	r1, r3, #26
 8001baa:	d502      	bpl.n	8001bb2 <_printf_common+0x32>
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	602b      	str	r3, [r5, #0]
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f013 0906 	ands.w	r9, r3, #6
 8001bb8:	d01d      	beq.n	8001bf6 <_printf_common+0x76>
 8001bba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001bbe:	6822      	ldr	r2, [r4, #0]
 8001bc0:	3300      	adds	r3, #0
 8001bc2:	bf18      	it	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	0692      	lsls	r2, r2, #26
 8001bc8:	d51f      	bpl.n	8001c0a <_printf_common+0x8a>
 8001bca:	18e1      	adds	r1, r4, r3
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	2030      	movs	r0, #48	; 0x30
 8001bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bd4:	4422      	add	r2, r4
 8001bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bde:	3302      	adds	r3, #2
 8001be0:	e013      	b.n	8001c0a <_printf_common+0x8a>
 8001be2:	4630      	mov	r0, r6
 8001be4:	4639      	mov	r1, r7
 8001be6:	f104 0219 	add.w	r2, r4, #25
 8001bea:	2301      	movs	r3, #1
 8001bec:	47c0      	blx	r8
 8001bee:	3001      	adds	r0, #1
 8001bf0:	d007      	beq.n	8001c02 <_printf_common+0x82>
 8001bf2:	f109 0901 	add.w	r9, r9, #1
 8001bf6:	68e2      	ldr	r2, [r4, #12]
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4599      	cmp	r9, r3
 8001bfe:	dbf0      	blt.n	8001be2 <_printf_common+0x62>
 8001c00:	e7db      	b.n	8001bba <_printf_common+0x3a>
 8001c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c12:	47c0      	blx	r8
 8001c14:	3001      	adds	r0, #1
 8001c16:	d0f4      	beq.n	8001c02 <_printf_common+0x82>
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	682a      	ldr	r2, [r5, #0]
 8001c1c:	68e1      	ldr	r1, [r4, #12]
 8001c1e:	f003 0306 	and.w	r3, r3, #6
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf08      	it	eq
 8001c26:	ebc2 0501 	rsbeq	r5, r2, r1
 8001c2a:	6923      	ldr	r3, [r4, #16]
 8001c2c:	68a2      	ldr	r2, [r4, #8]
 8001c2e:	bf0c      	ite	eq
 8001c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c34:	2500      	movne	r5, #0
 8001c36:	429a      	cmp	r2, r3
 8001c38:	bfc4      	itt	gt
 8001c3a:	ebc3 0302 	rsbgt	r3, r3, r2
 8001c3e:	18ed      	addgt	r5, r5, r3
 8001c40:	f04f 0900 	mov.w	r9, #0
 8001c44:	45a9      	cmp	r9, r5
 8001c46:	da0a      	bge.n	8001c5e <_printf_common+0xde>
 8001c48:	4630      	mov	r0, r6
 8001c4a:	4639      	mov	r1, r7
 8001c4c:	f104 021a 	add.w	r2, r4, #26
 8001c50:	2301      	movs	r3, #1
 8001c52:	47c0      	blx	r8
 8001c54:	3001      	adds	r0, #1
 8001c56:	d0d4      	beq.n	8001c02 <_printf_common+0x82>
 8001c58:	f109 0901 	add.w	r9, r9, #1
 8001c5c:	e7f2      	b.n	8001c44 <_printf_common+0xc4>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c64 <_printf_i>:
 8001c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c68:	7e0e      	ldrb	r6, [r1, #24]
 8001c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001c6c:	2e6e      	cmp	r6, #110	; 0x6e
 8001c6e:	4680      	mov	r8, r0
 8001c70:	460c      	mov	r4, r1
 8001c72:	4691      	mov	r9, r2
 8001c74:	469a      	mov	sl, r3
 8001c76:	f101 0043 	add.w	r0, r1, #67	; 0x43
 8001c7a:	f000 80a5 	beq.w	8001dc8 <_printf_i+0x164>
 8001c7e:	d811      	bhi.n	8001ca4 <_printf_i+0x40>
 8001c80:	2e63      	cmp	r6, #99	; 0x63
 8001c82:	d022      	beq.n	8001cca <_printf_i+0x66>
 8001c84:	d809      	bhi.n	8001c9a <_printf_i+0x36>
 8001c86:	2e00      	cmp	r6, #0
 8001c88:	f000 80af 	beq.w	8001dea <_printf_i+0x186>
 8001c8c:	2e58      	cmp	r6, #88	; 0x58
 8001c8e:	f040 80bf 	bne.w	8001e10 <_printf_i+0x1ac>
 8001c92:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
 8001c96:	4a7b      	ldr	r2, [pc, #492]	; (8001e84 <_printf_i+0x220>)
 8001c98:	e04f      	b.n	8001d3a <_printf_i+0xd6>
 8001c9a:	2e64      	cmp	r6, #100	; 0x64
 8001c9c:	d01e      	beq.n	8001cdc <_printf_i+0x78>
 8001c9e:	2e69      	cmp	r6, #105	; 0x69
 8001ca0:	d01c      	beq.n	8001cdc <_printf_i+0x78>
 8001ca2:	e0b5      	b.n	8001e10 <_printf_i+0x1ac>
 8001ca4:	2e73      	cmp	r6, #115	; 0x73
 8001ca6:	f000 80a4 	beq.w	8001df2 <_printf_i+0x18e>
 8001caa:	d809      	bhi.n	8001cc0 <_printf_i+0x5c>
 8001cac:	2e6f      	cmp	r6, #111	; 0x6f
 8001cae:	d02b      	beq.n	8001d08 <_printf_i+0xa4>
 8001cb0:	2e70      	cmp	r6, #112	; 0x70
 8001cb2:	f040 80ad 	bne.w	8001e10 <_printf_i+0x1ac>
 8001cb6:	680b      	ldr	r3, [r1, #0]
 8001cb8:	f043 0320 	orr.w	r3, r3, #32
 8001cbc:	600b      	str	r3, [r1, #0]
 8001cbe:	e038      	b.n	8001d32 <_printf_i+0xce>
 8001cc0:	2e75      	cmp	r6, #117	; 0x75
 8001cc2:	d021      	beq.n	8001d08 <_printf_i+0xa4>
 8001cc4:	2e78      	cmp	r6, #120	; 0x78
 8001cc6:	d034      	beq.n	8001d32 <_printf_i+0xce>
 8001cc8:	e0a2      	b.n	8001e10 <_printf_i+0x1ac>
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	1d1a      	adds	r2, r3, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	602a      	str	r2, [r5, #0]
 8001cd2:	f101 0742 	add.w	r7, r1, #66	; 0x42
 8001cd6:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
 8001cda:	e09d      	b.n	8001e18 <_printf_i+0x1b4>
 8001cdc:	6822      	ldr	r2, [r4, #0]
 8001cde:	682b      	ldr	r3, [r5, #0]
 8001ce0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ce4:	d003      	beq.n	8001cee <_printf_i+0x8a>
 8001ce6:	1d1a      	adds	r2, r3, #4
 8001ce8:	602a      	str	r2, [r5, #0]
 8001cea:	681d      	ldr	r5, [r3, #0]
 8001cec:	e005      	b.n	8001cfa <_printf_i+0x96>
 8001cee:	0651      	lsls	r1, r2, #25
 8001cf0:	d5f9      	bpl.n	8001ce6 <_printf_i+0x82>
 8001cf2:	1d1a      	adds	r2, r3, #4
 8001cf4:	602a      	str	r2, [r5, #0]
 8001cf6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	da39      	bge.n	8001d72 <_printf_i+0x10e>
 8001cfe:	232d      	movs	r3, #45	; 0x2d
 8001d00:	426d      	negs	r5, r5
 8001d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d06:	e034      	b.n	8001d72 <_printf_i+0x10e>
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001d10:	d003      	beq.n	8001d1a <_printf_i+0xb6>
 8001d12:	1d1a      	adds	r2, r3, #4
 8001d14:	602a      	str	r2, [r5, #0]
 8001d16:	681d      	ldr	r5, [r3, #0]
 8001d18:	e004      	b.n	8001d24 <_printf_i+0xc0>
 8001d1a:	0652      	lsls	r2, r2, #25
 8001d1c:	d5f9      	bpl.n	8001d12 <_printf_i+0xae>
 8001d1e:	1d1a      	adds	r2, r3, #4
 8001d20:	602a      	str	r2, [r5, #0]
 8001d22:	881d      	ldrh	r5, [r3, #0]
 8001d24:	7e23      	ldrb	r3, [r4, #24]
 8001d26:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <_printf_i+0x220>)
 8001d28:	2b6f      	cmp	r3, #111	; 0x6f
 8001d2a:	bf14      	ite	ne
 8001d2c:	230a      	movne	r3, #10
 8001d2e:	2308      	moveq	r3, #8
 8001d30:	e01b      	b.n	8001d6a <_printf_i+0x106>
 8001d32:	2378      	movs	r3, #120	; 0x78
 8001d34:	4a54      	ldr	r2, [pc, #336]	; (8001e88 <_printf_i+0x224>)
 8001d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	6829      	ldr	r1, [r5, #0]
 8001d3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d42:	f101 0604 	add.w	r6, r1, #4
 8001d46:	602e      	str	r6, [r5, #0]
 8001d48:	d001      	beq.n	8001d4e <_printf_i+0xea>
 8001d4a:	680d      	ldr	r5, [r1, #0]
 8001d4c:	e002      	b.n	8001d54 <_printf_i+0xf0>
 8001d4e:	065f      	lsls	r7, r3, #25
 8001d50:	d5fb      	bpl.n	8001d4a <_printf_i+0xe6>
 8001d52:	880d      	ldrh	r5, [r1, #0]
 8001d54:	07de      	lsls	r6, r3, #31
 8001d56:	bf44      	itt	mi
 8001d58:	f043 0320 	orrmi.w	r3, r3, #32
 8001d5c:	6023      	strmi	r3, [r4, #0]
 8001d5e:	b91d      	cbnz	r5, 8001d68 <_printf_i+0x104>
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	f023 0320 	bic.w	r3, r3, #32
 8001d66:	6023      	str	r3, [r4, #0]
 8001d68:	2310      	movs	r3, #16
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d70:	e001      	b.n	8001d76 <_printf_i+0x112>
 8001d72:	4a44      	ldr	r2, [pc, #272]	; (8001e84 <_printf_i+0x220>)
 8001d74:	230a      	movs	r3, #10
 8001d76:	6866      	ldr	r6, [r4, #4]
 8001d78:	60a6      	str	r6, [r4, #8]
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	db03      	blt.n	8001d86 <_printf_i+0x122>
 8001d7e:	6821      	ldr	r1, [r4, #0]
 8001d80:	f021 0104 	bic.w	r1, r1, #4
 8001d84:	6021      	str	r1, [r4, #0]
 8001d86:	b905      	cbnz	r5, 8001d8a <_printf_i+0x126>
 8001d88:	b16e      	cbz	r6, 8001da6 <_printf_i+0x142>
 8001d8a:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8001d8e:	fbb5 f6f3 	udiv	r6, r5, r3
 8001d92:	fb03 5516 	mls	r5, r3, r6, r5
 8001d96:	460f      	mov	r7, r1
 8001d98:	5d55      	ldrb	r5, [r2, r5]
 8001d9a:	f801 5901 	strb.w	r5, [r1], #-1
 8001d9e:	4635      	mov	r5, r6
 8001da0:	2e00      	cmp	r6, #0
 8001da2:	d1f4      	bne.n	8001d8e <_printf_i+0x12a>
 8001da4:	e000      	b.n	8001da8 <_printf_i+0x144>
 8001da6:	4607      	mov	r7, r0
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d10a      	bne.n	8001dc2 <_printf_i+0x15e>
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	07dd      	lsls	r5, r3, #31
 8001db0:	d507      	bpl.n	8001dc2 <_printf_i+0x15e>
 8001db2:	6862      	ldr	r2, [r4, #4]
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dc03      	bgt.n	8001dc2 <_printf_i+0x15e>
 8001dba:	2330      	movs	r3, #48	; 0x30
 8001dbc:	f807 3c01 	strb.w	r3, [r7, #-1]
 8001dc0:	3f01      	subs	r7, #1
 8001dc2:	1bc0      	subs	r0, r0, r7
 8001dc4:	6120      	str	r0, [r4, #16]
 8001dc6:	e02c      	b.n	8001e22 <_printf_i+0x1be>
 8001dc8:	6809      	ldr	r1, [r1, #0]
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	6962      	ldr	r2, [r4, #20]
 8001dce:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001dd2:	d004      	beq.n	8001dde <_printf_i+0x17a>
 8001dd4:	1d19      	adds	r1, r3, #4
 8001dd6:	6029      	str	r1, [r5, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e005      	b.n	8001dea <_printf_i+0x186>
 8001dde:	0649      	lsls	r1, r1, #25
 8001de0:	d5f8      	bpl.n	8001dd4 <_printf_i+0x170>
 8001de2:	1d19      	adds	r1, r3, #4
 8001de4:	6029      	str	r1, [r5, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	6123      	str	r3, [r4, #16]
 8001dee:	4607      	mov	r7, r0
 8001df0:	e017      	b.n	8001e22 <_printf_i+0x1be>
 8001df2:	682b      	ldr	r3, [r5, #0]
 8001df4:	1d1a      	adds	r2, r3, #4
 8001df6:	602a      	str	r2, [r5, #0]
 8001df8:	681f      	ldr	r7, [r3, #0]
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	f000 fc2d 	bl	800265a <strlen>
 8001e00:	6863      	ldr	r3, [r4, #4]
 8001e02:	6120      	str	r0, [r4, #16]
 8001e04:	4298      	cmp	r0, r3
 8001e06:	bf88      	it	hi
 8001e08:	6123      	strhi	r3, [r4, #16]
 8001e0a:	6923      	ldr	r3, [r4, #16]
 8001e0c:	6063      	str	r3, [r4, #4]
 8001e0e:	e005      	b.n	8001e1c <_printf_i+0x1b8>
 8001e10:	f104 0742 	add.w	r7, r4, #66	; 0x42
 8001e14:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 8001e18:	2301      	movs	r3, #1
 8001e1a:	6123      	str	r3, [r4, #16]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e22:	f8cd a000 	str.w	sl, [sp]
 8001e26:	4640      	mov	r0, r8
 8001e28:	4621      	mov	r1, r4
 8001e2a:	aa03      	add	r2, sp, #12
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	f7ff fea7 	bl	8001b80 <_printf_common>
 8001e32:	3001      	adds	r0, #1
 8001e34:	d102      	bne.n	8001e3c <_printf_i+0x1d8>
 8001e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e3a:	e01f      	b.n	8001e7c <_printf_i+0x218>
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	4649      	mov	r1, r9
 8001e40:	463a      	mov	r2, r7
 8001e42:	6923      	ldr	r3, [r4, #16]
 8001e44:	47d0      	blx	sl
 8001e46:	3001      	adds	r0, #1
 8001e48:	d0f5      	beq.n	8001e36 <_printf_i+0x1d2>
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	079b      	lsls	r3, r3, #30
 8001e4e:	d405      	bmi.n	8001e5c <_printf_i+0x1f8>
 8001e50:	68e0      	ldr	r0, [r4, #12]
 8001e52:	9b03      	ldr	r3, [sp, #12]
 8001e54:	4298      	cmp	r0, r3
 8001e56:	bfb8      	it	lt
 8001e58:	4618      	movlt	r0, r3
 8001e5a:	e00f      	b.n	8001e7c <_printf_i+0x218>
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	68e2      	ldr	r2, [r4, #12]
 8001e60:	9b03      	ldr	r3, [sp, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	429d      	cmp	r5, r3
 8001e66:	daf3      	bge.n	8001e50 <_printf_i+0x1ec>
 8001e68:	4640      	mov	r0, r8
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	f104 0219 	add.w	r2, r4, #25
 8001e70:	2301      	movs	r3, #1
 8001e72:	47d0      	blx	sl
 8001e74:	3001      	adds	r0, #1
 8001e76:	d0de      	beq.n	8001e36 <_printf_i+0x1d2>
 8001e78:	3501      	adds	r5, #1
 8001e7a:	e7f0      	b.n	8001e5e <_printf_i+0x1fa>
 8001e7c:	b004      	add	sp, #16
 8001e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e82:	bf00      	nop
 8001e84:	08002cc5 	.word	0x08002cc5
 8001e88:	08002cd6 	.word	0x08002cd6

08001e8c <_vsiprintf_r>:
 8001e8c:	b510      	push	{r4, lr}
 8001e8e:	b09a      	sub	sp, #104	; 0x68
 8001e90:	f44f 7402 	mov.w	r4, #520	; 0x208
 8001e94:	9100      	str	r1, [sp, #0]
 8001e96:	9104      	str	r1, [sp, #16]
 8001e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e9c:	9102      	str	r1, [sp, #8]
 8001e9e:	9105      	str	r1, [sp, #20]
 8001ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ea4:	f8ad 100e 	strh.w	r1, [sp, #14]
 8001ea8:	4669      	mov	r1, sp
 8001eaa:	f8ad 400c 	strh.w	r4, [sp, #12]
 8001eae:	f000 fc39 	bl	8002724 <_svfiprintf_r>
 8001eb2:	9b00      	ldr	r3, [sp, #0]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	b01a      	add	sp, #104	; 0x68
 8001eba:	bd10      	pop	{r4, pc}

08001ebc <vsiprintf>:
 8001ebc:	b530      	push	{r4, r5, lr}
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <vsiprintf+0x18>)
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	6810      	ldr	r0, [r2, #0]
 8001ec8:	4629      	mov	r1, r5
 8001eca:	4622      	mov	r2, r4
 8001ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ed0:	f7ff bfdc 	b.w	8001e8c <_vsiprintf_r>
 8001ed4:	200000ec 	.word	0x200000ec

08001ed8 <__swbuf_r>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	460e      	mov	r6, r1
 8001edc:	4614      	mov	r4, r2
 8001ede:	4605      	mov	r5, r0
 8001ee0:	b118      	cbz	r0, 8001eea <__swbuf_r+0x12>
 8001ee2:	6983      	ldr	r3, [r0, #24]
 8001ee4:	b90b      	cbnz	r3, 8001eea <__swbuf_r+0x12>
 8001ee6:	f000 f9bb 	bl	8002260 <__sinit>
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <__swbuf_r+0x9c>)
 8001eec:	429c      	cmp	r4, r3
 8001eee:	d101      	bne.n	8001ef4 <__swbuf_r+0x1c>
 8001ef0:	686c      	ldr	r4, [r5, #4]
 8001ef2:	e008      	b.n	8001f06 <__swbuf_r+0x2e>
 8001ef4:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <__swbuf_r+0xa0>)
 8001ef6:	429c      	cmp	r4, r3
 8001ef8:	d101      	bne.n	8001efe <__swbuf_r+0x26>
 8001efa:	68ac      	ldr	r4, [r5, #8]
 8001efc:	e003      	b.n	8001f06 <__swbuf_r+0x2e>
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <__swbuf_r+0xa4>)
 8001f00:	429c      	cmp	r4, r3
 8001f02:	bf08      	it	eq
 8001f04:	68ec      	ldreq	r4, [r5, #12]
 8001f06:	69a3      	ldr	r3, [r4, #24]
 8001f08:	60a3      	str	r3, [r4, #8]
 8001f0a:	89a3      	ldrh	r3, [r4, #12]
 8001f0c:	071a      	lsls	r2, r3, #28
 8001f0e:	d509      	bpl.n	8001f24 <__swbuf_r+0x4c>
 8001f10:	6923      	ldr	r3, [r4, #16]
 8001f12:	b13b      	cbz	r3, 8001f24 <__swbuf_r+0x4c>
 8001f14:	6923      	ldr	r3, [r4, #16]
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	1ac0      	subs	r0, r0, r3
 8001f1a:	6963      	ldr	r3, [r4, #20]
 8001f1c:	4298      	cmp	r0, r3
 8001f1e:	b2f6      	uxtb	r6, r6
 8001f20:	db0f      	blt.n	8001f42 <__swbuf_r+0x6a>
 8001f22:	e008      	b.n	8001f36 <__swbuf_r+0x5e>
 8001f24:	4628      	mov	r0, r5
 8001f26:	4621      	mov	r1, r4
 8001f28:	f000 f82a 	bl	8001f80 <__swsetup_r>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d0f1      	beq.n	8001f14 <__swbuf_r+0x3c>
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
 8001f36:	4628      	mov	r0, r5
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f000 f913 	bl	8002164 <_fflush_r>
 8001f3e:	2800      	cmp	r0, #0
 8001f40:	d1f6      	bne.n	8001f30 <__swbuf_r+0x58>
 8001f42:	68a3      	ldr	r3, [r4, #8]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60a3      	str	r3, [r4, #8]
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	6022      	str	r2, [r4, #0]
 8001f4e:	701e      	strb	r6, [r3, #0]
 8001f50:	6963      	ldr	r3, [r4, #20]
 8001f52:	3001      	adds	r0, #1
 8001f54:	4298      	cmp	r0, r3
 8001f56:	d004      	beq.n	8001f62 <__swbuf_r+0x8a>
 8001f58:	89a3      	ldrh	r3, [r4, #12]
 8001f5a:	07db      	lsls	r3, r3, #31
 8001f5c:	d507      	bpl.n	8001f6e <__swbuf_r+0x96>
 8001f5e:	2e0a      	cmp	r6, #10
 8001f60:	d105      	bne.n	8001f6e <__swbuf_r+0x96>
 8001f62:	4628      	mov	r0, r5
 8001f64:	4621      	mov	r1, r4
 8001f66:	f000 f8fd 	bl	8002164 <_fflush_r>
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d1e0      	bne.n	8001f30 <__swbuf_r+0x58>
 8001f6e:	4630      	mov	r0, r6
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
 8001f72:	bf00      	nop
 8001f74:	08002ce8 	.word	0x08002ce8
 8001f78:	08002d08 	.word	0x08002d08
 8001f7c:	08002d28 	.word	0x08002d28

08001f80 <__swsetup_r>:
 8001f80:	4b32      	ldr	r3, [pc, #200]	; (800204c <__swsetup_r+0xcc>)
 8001f82:	b570      	push	{r4, r5, r6, lr}
 8001f84:	681d      	ldr	r5, [r3, #0]
 8001f86:	4606      	mov	r6, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	b125      	cbz	r5, 8001f96 <__swsetup_r+0x16>
 8001f8c:	69ab      	ldr	r3, [r5, #24]
 8001f8e:	b913      	cbnz	r3, 8001f96 <__swsetup_r+0x16>
 8001f90:	4628      	mov	r0, r5
 8001f92:	f000 f965 	bl	8002260 <__sinit>
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <__swsetup_r+0xd0>)
 8001f98:	429c      	cmp	r4, r3
 8001f9a:	d101      	bne.n	8001fa0 <__swsetup_r+0x20>
 8001f9c:	686c      	ldr	r4, [r5, #4]
 8001f9e:	e008      	b.n	8001fb2 <__swsetup_r+0x32>
 8001fa0:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <__swsetup_r+0xd4>)
 8001fa2:	429c      	cmp	r4, r3
 8001fa4:	d101      	bne.n	8001faa <__swsetup_r+0x2a>
 8001fa6:	68ac      	ldr	r4, [r5, #8]
 8001fa8:	e003      	b.n	8001fb2 <__swsetup_r+0x32>
 8001faa:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <__swsetup_r+0xd8>)
 8001fac:	429c      	cmp	r4, r3
 8001fae:	bf08      	it	eq
 8001fb0:	68ec      	ldreq	r4, [r5, #12]
 8001fb2:	89a2      	ldrh	r2, [r4, #12]
 8001fb4:	b293      	uxth	r3, r2
 8001fb6:	0719      	lsls	r1, r3, #28
 8001fb8:	d420      	bmi.n	8001ffc <__swsetup_r+0x7c>
 8001fba:	06dd      	lsls	r5, r3, #27
 8001fbc:	d405      	bmi.n	8001fca <__swsetup_r+0x4a>
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc4:	6033      	str	r3, [r6, #0]
 8001fc6:	81a2      	strh	r2, [r4, #12]
 8001fc8:	e03b      	b.n	8002042 <__swsetup_r+0xc2>
 8001fca:	0758      	lsls	r0, r3, #29
 8001fcc:	d512      	bpl.n	8001ff4 <__swsetup_r+0x74>
 8001fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fd0:	b141      	cbz	r1, 8001fe4 <__swsetup_r+0x64>
 8001fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fd6:	4299      	cmp	r1, r3
 8001fd8:	d002      	beq.n	8001fe0 <__swsetup_r+0x60>
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f000 fa2c 	bl	8002438 <_free_r>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6363      	str	r3, [r4, #52]	; 0x34
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	2300      	movs	r3, #0
 8001fee:	6063      	str	r3, [r4, #4]
 8001ff0:	6923      	ldr	r3, [r4, #16]
 8001ff2:	6023      	str	r3, [r4, #0]
 8001ff4:	89a3      	ldrh	r3, [r4, #12]
 8001ff6:	f043 0308 	orr.w	r3, r3, #8
 8001ffa:	81a3      	strh	r3, [r4, #12]
 8001ffc:	6923      	ldr	r3, [r4, #16]
 8001ffe:	b94b      	cbnz	r3, 8002014 <__swsetup_r+0x94>
 8002000:	89a3      	ldrh	r3, [r4, #12]
 8002002:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800200a:	d003      	beq.n	8002014 <__swsetup_r+0x94>
 800200c:	4630      	mov	r0, r6
 800200e:	4621      	mov	r1, r4
 8002010:	f000 f990 	bl	8002334 <__smakebuf_r>
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	f013 0201 	ands.w	r2, r3, #1
 800201a:	d005      	beq.n	8002028 <__swsetup_r+0xa8>
 800201c:	2200      	movs	r2, #0
 800201e:	60a2      	str	r2, [r4, #8]
 8002020:	6962      	ldr	r2, [r4, #20]
 8002022:	4252      	negs	r2, r2
 8002024:	61a2      	str	r2, [r4, #24]
 8002026:	e003      	b.n	8002030 <__swsetup_r+0xb0>
 8002028:	0799      	lsls	r1, r3, #30
 800202a:	bf58      	it	pl
 800202c:	6962      	ldrpl	r2, [r4, #20]
 800202e:	60a2      	str	r2, [r4, #8]
 8002030:	6922      	ldr	r2, [r4, #16]
 8002032:	b94a      	cbnz	r2, 8002048 <__swsetup_r+0xc8>
 8002034:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8002038:	b280      	uxth	r0, r0
 800203a:	b130      	cbz	r0, 800204a <__swsetup_r+0xca>
 800203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002040:	81a3      	strh	r3, [r4, #12]
 8002042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	2000      	movs	r0, #0
 800204a:	bd70      	pop	{r4, r5, r6, pc}
 800204c:	200000ec 	.word	0x200000ec
 8002050:	08002ce8 	.word	0x08002ce8
 8002054:	08002d08 	.word	0x08002d08
 8002058:	08002d28 	.word	0x08002d28

0800205c <__sflush_r>:
 800205c:	898a      	ldrh	r2, [r1, #12]
 800205e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002062:	4605      	mov	r5, r0
 8002064:	0710      	lsls	r0, r2, #28
 8002066:	460c      	mov	r4, r1
 8002068:	d457      	bmi.n	800211a <__sflush_r+0xbe>
 800206a:	684b      	ldr	r3, [r1, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	dc02      	bgt.n	8002076 <__sflush_r+0x1a>
 8002070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	dd18      	ble.n	80020a8 <__sflush_r+0x4c>
 8002076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002078:	b1b6      	cbz	r6, 80020a8 <__sflush_r+0x4c>
 800207a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800207e:	2300      	movs	r3, #0
 8002080:	b292      	uxth	r2, r2
 8002082:	682f      	ldr	r7, [r5, #0]
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	b10a      	cbz	r2, 800208c <__sflush_r+0x30>
 8002088:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800208a:	e010      	b.n	80020ae <__sflush_r+0x52>
 800208c:	6a21      	ldr	r1, [r4, #32]
 800208e:	4628      	mov	r0, r5
 8002090:	2301      	movs	r3, #1
 8002092:	47b0      	blx	r6
 8002094:	1c41      	adds	r1, r0, #1
 8002096:	4602      	mov	r2, r0
 8002098:	d109      	bne.n	80020ae <__sflush_r+0x52>
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	b13b      	cbz	r3, 80020ae <__sflush_r+0x52>
 800209e:	2b1d      	cmp	r3, #29
 80020a0:	d001      	beq.n	80020a6 <__sflush_r+0x4a>
 80020a2:	2b16      	cmp	r3, #22
 80020a4:	d146      	bne.n	8002134 <__sflush_r+0xd8>
 80020a6:	602f      	str	r7, [r5, #0]
 80020a8:	2000      	movs	r0, #0
 80020aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020ae:	89a3      	ldrh	r3, [r4, #12]
 80020b0:	075b      	lsls	r3, r3, #29
 80020b2:	d505      	bpl.n	80020c0 <__sflush_r+0x64>
 80020b4:	6863      	ldr	r3, [r4, #4]
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020ba:	b10b      	cbz	r3, 80020c0 <__sflush_r+0x64>
 80020bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020be:	1ad2      	subs	r2, r2, r3
 80020c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020c2:	6a21      	ldr	r1, [r4, #32]
 80020c4:	4628      	mov	r0, r5
 80020c6:	2300      	movs	r3, #0
 80020c8:	47b0      	blx	r6
 80020ca:	1c46      	adds	r6, r0, #1
 80020cc:	89a2      	ldrh	r2, [r4, #12]
 80020ce:	d105      	bne.n	80020dc <__sflush_r+0x80>
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	b11b      	cbz	r3, 80020dc <__sflush_r+0x80>
 80020d4:	2b1d      	cmp	r3, #29
 80020d6:	d001      	beq.n	80020dc <__sflush_r+0x80>
 80020d8:	2b16      	cmp	r3, #22
 80020da:	d119      	bne.n	8002110 <__sflush_r+0xb4>
 80020dc:	2300      	movs	r3, #0
 80020de:	6063      	str	r3, [r4, #4]
 80020e0:	04d1      	lsls	r1, r2, #19
 80020e2:	6923      	ldr	r3, [r4, #16]
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	d504      	bpl.n	80020f2 <__sflush_r+0x96>
 80020e8:	1c42      	adds	r2, r0, #1
 80020ea:	d101      	bne.n	80020f0 <__sflush_r+0x94>
 80020ec:	682b      	ldr	r3, [r5, #0]
 80020ee:	b903      	cbnz	r3, 80020f2 <__sflush_r+0x96>
 80020f0:	6560      	str	r0, [r4, #84]	; 0x54
 80020f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020f4:	602f      	str	r7, [r5, #0]
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d0d6      	beq.n	80020a8 <__sflush_r+0x4c>
 80020fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020fe:	4299      	cmp	r1, r3
 8002100:	d002      	beq.n	8002108 <__sflush_r+0xac>
 8002102:	4628      	mov	r0, r5
 8002104:	f000 f998 	bl	8002438 <_free_r>
 8002108:	2000      	movs	r0, #0
 800210a:	6360      	str	r0, [r4, #52]	; 0x34
 800210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002114:	81a2      	strh	r2, [r4, #12]
 8002116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800211a:	690e      	ldr	r6, [r1, #16]
 800211c:	2e00      	cmp	r6, #0
 800211e:	d0c3      	beq.n	80020a8 <__sflush_r+0x4c>
 8002120:	680b      	ldr	r3, [r1, #0]
 8002122:	600e      	str	r6, [r1, #0]
 8002124:	ebc6 0803 	rsb	r8, r6, r3
 8002128:	0793      	lsls	r3, r2, #30
 800212a:	bf0c      	ite	eq
 800212c:	694b      	ldreq	r3, [r1, #20]
 800212e:	2300      	movne	r3, #0
 8002130:	608b      	str	r3, [r1, #8]
 8002132:	e012      	b.n	800215a <__sflush_r+0xfe>
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002144:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002146:	6a21      	ldr	r1, [r4, #32]
 8002148:	4628      	mov	r0, r5
 800214a:	4632      	mov	r2, r6
 800214c:	4643      	mov	r3, r8
 800214e:	47b8      	blx	r7
 8002150:	2800      	cmp	r0, #0
 8002152:	ddef      	ble.n	8002134 <__sflush_r+0xd8>
 8002154:	4406      	add	r6, r0
 8002156:	ebc0 0808 	rsb	r8, r0, r8
 800215a:	f1b8 0f00 	cmp.w	r8, #0
 800215e:	dcf1      	bgt.n	8002144 <__sflush_r+0xe8>
 8002160:	e7a2      	b.n	80020a8 <__sflush_r+0x4c>
	...

08002164 <_fflush_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	690b      	ldr	r3, [r1, #16]
 8002168:	4605      	mov	r5, r0
 800216a:	460c      	mov	r4, r1
 800216c:	b1db      	cbz	r3, 80021a6 <_fflush_r+0x42>
 800216e:	b118      	cbz	r0, 8002178 <_fflush_r+0x14>
 8002170:	6983      	ldr	r3, [r0, #24]
 8002172:	b90b      	cbnz	r3, 8002178 <_fflush_r+0x14>
 8002174:	f000 f874 	bl	8002260 <__sinit>
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <_fflush_r+0x48>)
 800217a:	429c      	cmp	r4, r3
 800217c:	d101      	bne.n	8002182 <_fflush_r+0x1e>
 800217e:	686c      	ldr	r4, [r5, #4]
 8002180:	e008      	b.n	8002194 <_fflush_r+0x30>
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <_fflush_r+0x4c>)
 8002184:	429c      	cmp	r4, r3
 8002186:	d101      	bne.n	800218c <_fflush_r+0x28>
 8002188:	68ac      	ldr	r4, [r5, #8]
 800218a:	e003      	b.n	8002194 <_fflush_r+0x30>
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <_fflush_r+0x50>)
 800218e:	429c      	cmp	r4, r3
 8002190:	bf08      	it	eq
 8002192:	68ec      	ldreq	r4, [r5, #12]
 8002194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002198:	b12b      	cbz	r3, 80021a6 <_fflush_r+0x42>
 800219a:	4628      	mov	r0, r5
 800219c:	4621      	mov	r1, r4
 800219e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021a2:	f7ff bf5b 	b.w	800205c <__sflush_r>
 80021a6:	2000      	movs	r0, #0
 80021a8:	bd38      	pop	{r3, r4, r5, pc}
 80021aa:	bf00      	nop
 80021ac:	08002ce8 	.word	0x08002ce8
 80021b0:	08002d08 	.word	0x08002d08
 80021b4:	08002d28 	.word	0x08002d28

080021b8 <_cleanup_r>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	4607      	mov	r7, r0
 80021bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021c0:	b194      	cbz	r4, 80021e8 <_cleanup_r+0x30>
 80021c2:	68a5      	ldr	r5, [r4, #8]
 80021c4:	6866      	ldr	r6, [r4, #4]
 80021c6:	3e01      	subs	r6, #1
 80021c8:	d40c      	bmi.n	80021e4 <_cleanup_r+0x2c>
 80021ca:	89ab      	ldrh	r3, [r5, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d907      	bls.n	80021e0 <_cleanup_r+0x28>
 80021d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021d4:	3301      	adds	r3, #1
 80021d6:	d003      	beq.n	80021e0 <_cleanup_r+0x28>
 80021d8:	4638      	mov	r0, r7
 80021da:	4629      	mov	r1, r5
 80021dc:	f7ff ffc2 	bl	8002164 <_fflush_r>
 80021e0:	3568      	adds	r5, #104	; 0x68
 80021e2:	e7f0      	b.n	80021c6 <_cleanup_r+0xe>
 80021e4:	6824      	ldr	r4, [r4, #0]
 80021e6:	e7eb      	b.n	80021c0 <_cleanup_r+0x8>
 80021e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021ec <std.isra.0>:
 80021ec:	2300      	movs	r3, #0
 80021ee:	b510      	push	{r4, lr}
 80021f0:	4604      	mov	r4, r0
 80021f2:	6003      	str	r3, [r0, #0]
 80021f4:	6043      	str	r3, [r0, #4]
 80021f6:	6083      	str	r3, [r0, #8]
 80021f8:	8181      	strh	r1, [r0, #12]
 80021fa:	6643      	str	r3, [r0, #100]	; 0x64
 80021fc:	81c2      	strh	r2, [r0, #14]
 80021fe:	6103      	str	r3, [r0, #16]
 8002200:	6143      	str	r3, [r0, #20]
 8002202:	6183      	str	r3, [r0, #24]
 8002204:	4619      	mov	r1, r3
 8002206:	305c      	adds	r0, #92	; 0x5c
 8002208:	2208      	movs	r2, #8
 800220a:	f7ff fb6d 	bl	80018e8 <memset>
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <std.isra.0+0x38>)
 8002210:	6263      	str	r3, [r4, #36]	; 0x24
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <std.isra.0+0x3c>)
 8002214:	62a3      	str	r3, [r4, #40]	; 0x28
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <std.isra.0+0x40>)
 8002218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <std.isra.0+0x44>)
 800221c:	6224      	str	r4, [r4, #32]
 800221e:	6323      	str	r3, [r4, #48]	; 0x30
 8002220:	bd10      	pop	{r4, pc}
 8002222:	bf00      	nop
 8002224:	080025d5 	.word	0x080025d5
 8002228:	080025f7 	.word	0x080025f7
 800222c:	0800262f 	.word	0x0800262f
 8002230:	08002653 	.word	0x08002653

08002234 <__sfmoreglue>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	1e4b      	subs	r3, r1, #1
 8002238:	2568      	movs	r5, #104	; 0x68
 800223a:	435d      	muls	r5, r3
 800223c:	460e      	mov	r6, r1
 800223e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002242:	f000 f93d 	bl	80024c0 <_malloc_r>
 8002246:	4604      	mov	r4, r0
 8002248:	b140      	cbz	r0, 800225c <__sfmoreglue+0x28>
 800224a:	2100      	movs	r1, #0
 800224c:	e880 0042 	stmia.w	r0, {r1, r6}
 8002250:	300c      	adds	r0, #12
 8002252:	60a0      	str	r0, [r4, #8]
 8002254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002258:	f7ff fb46 	bl	80018e8 <memset>
 800225c:	4620      	mov	r0, r4
 800225e:	bd70      	pop	{r4, r5, r6, pc}

08002260 <__sinit>:
 8002260:	6983      	ldr	r3, [r0, #24]
 8002262:	b510      	push	{r4, lr}
 8002264:	4604      	mov	r4, r0
 8002266:	bb33      	cbnz	r3, 80022b6 <__sinit+0x56>
 8002268:	6483      	str	r3, [r0, #72]	; 0x48
 800226a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800226c:	6503      	str	r3, [r0, #80]	; 0x50
 800226e:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <__sinit+0x58>)
 8002270:	4a12      	ldr	r2, [pc, #72]	; (80022bc <__sinit+0x5c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6282      	str	r2, [r0, #40]	; 0x28
 8002276:	4298      	cmp	r0, r3
 8002278:	bf04      	itt	eq
 800227a:	2301      	moveq	r3, #1
 800227c:	6183      	streq	r3, [r0, #24]
 800227e:	f000 f81f 	bl	80022c0 <__sfp>
 8002282:	6060      	str	r0, [r4, #4]
 8002284:	4620      	mov	r0, r4
 8002286:	f000 f81b 	bl	80022c0 <__sfp>
 800228a:	60a0      	str	r0, [r4, #8]
 800228c:	4620      	mov	r0, r4
 800228e:	f000 f817 	bl	80022c0 <__sfp>
 8002292:	2104      	movs	r1, #4
 8002294:	60e0      	str	r0, [r4, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	6860      	ldr	r0, [r4, #4]
 800229a:	f7ff ffa7 	bl	80021ec <std.isra.0>
 800229e:	68a0      	ldr	r0, [r4, #8]
 80022a0:	2109      	movs	r1, #9
 80022a2:	2201      	movs	r2, #1
 80022a4:	f7ff ffa2 	bl	80021ec <std.isra.0>
 80022a8:	68e0      	ldr	r0, [r4, #12]
 80022aa:	2112      	movs	r1, #18
 80022ac:	2202      	movs	r2, #2
 80022ae:	f7ff ff9d 	bl	80021ec <std.isra.0>
 80022b2:	2301      	movs	r3, #1
 80022b4:	61a3      	str	r3, [r4, #24]
 80022b6:	bd10      	pop	{r4, pc}
 80022b8:	08002d4c 	.word	0x08002d4c
 80022bc:	080021b9 	.word	0x080021b9

080022c0 <__sfp>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <__sfp+0x70>)
 80022c4:	681e      	ldr	r6, [r3, #0]
 80022c6:	69b3      	ldr	r3, [r6, #24]
 80022c8:	4607      	mov	r7, r0
 80022ca:	b913      	cbnz	r3, 80022d2 <__sfp+0x12>
 80022cc:	4630      	mov	r0, r6
 80022ce:	f7ff ffc7 	bl	8002260 <__sinit>
 80022d2:	3648      	adds	r6, #72	; 0x48
 80022d4:	68b4      	ldr	r4, [r6, #8]
 80022d6:	6873      	ldr	r3, [r6, #4]
 80022d8:	3b01      	subs	r3, #1
 80022da:	d404      	bmi.n	80022e6 <__sfp+0x26>
 80022dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022e0:	b175      	cbz	r5, 8002300 <__sfp+0x40>
 80022e2:	3468      	adds	r4, #104	; 0x68
 80022e4:	e7f8      	b.n	80022d8 <__sfp+0x18>
 80022e6:	6833      	ldr	r3, [r6, #0]
 80022e8:	b92b      	cbnz	r3, 80022f6 <__sfp+0x36>
 80022ea:	4638      	mov	r0, r7
 80022ec:	2104      	movs	r1, #4
 80022ee:	f7ff ffa1 	bl	8002234 <__sfmoreglue>
 80022f2:	6030      	str	r0, [r6, #0]
 80022f4:	b108      	cbz	r0, 80022fa <__sfp+0x3a>
 80022f6:	6836      	ldr	r6, [r6, #0]
 80022f8:	e7ec      	b.n	80022d4 <__sfp+0x14>
 80022fa:	230c      	movs	r3, #12
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	81e3      	strh	r3, [r4, #14]
 8002306:	2301      	movs	r3, #1
 8002308:	81a3      	strh	r3, [r4, #12]
 800230a:	6665      	str	r5, [r4, #100]	; 0x64
 800230c:	6025      	str	r5, [r4, #0]
 800230e:	60a5      	str	r5, [r4, #8]
 8002310:	6065      	str	r5, [r4, #4]
 8002312:	6125      	str	r5, [r4, #16]
 8002314:	6165      	str	r5, [r4, #20]
 8002316:	61a5      	str	r5, [r4, #24]
 8002318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800231c:	4629      	mov	r1, r5
 800231e:	2208      	movs	r2, #8
 8002320:	f7ff fae2 	bl	80018e8 <memset>
 8002324:	6365      	str	r5, [r4, #52]	; 0x34
 8002326:	63a5      	str	r5, [r4, #56]	; 0x38
 8002328:	64a5      	str	r5, [r4, #72]	; 0x48
 800232a:	64e5      	str	r5, [r4, #76]	; 0x4c
 800232c:	4620      	mov	r0, r4
 800232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002330:	08002d4c 	.word	0x08002d4c

08002334 <__smakebuf_r>:
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	898b      	ldrh	r3, [r1, #12]
 8002338:	079e      	lsls	r6, r3, #30
 800233a:	b091      	sub	sp, #68	; 0x44
 800233c:	4605      	mov	r5, r0
 800233e:	460c      	mov	r4, r1
 8002340:	d426      	bmi.n	8002390 <__smakebuf_r+0x5c>
 8002342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002346:	2900      	cmp	r1, #0
 8002348:	da09      	bge.n	800235e <__smakebuf_r+0x2a>
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002350:	f04f 0700 	mov.w	r7, #0
 8002354:	bf14      	ite	ne
 8002356:	2640      	movne	r6, #64	; 0x40
 8002358:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800235c:	e00d      	b.n	800237a <__smakebuf_r+0x46>
 800235e:	aa01      	add	r2, sp, #4
 8002360:	f000 faf0 	bl	8002944 <_fstat_r>
 8002364:	2800      	cmp	r0, #0
 8002366:	dbf0      	blt.n	800234a <__smakebuf_r+0x16>
 8002368:	9f02      	ldr	r7, [sp, #8]
 800236a:	f407 4770 	and.w	r7, r7, #61440	; 0xf000
 800236e:	f5b7 5100 	subs.w	r1, r7, #8192	; 0x2000
 8002372:	424f      	negs	r7, r1
 8002374:	414f      	adcs	r7, r1
 8002376:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800237a:	4628      	mov	r0, r5
 800237c:	4631      	mov	r1, r6
 800237e:	f000 f89f 	bl	80024c0 <_malloc_r>
 8002382:	b960      	cbnz	r0, 800239e <__smakebuf_r+0x6a>
 8002384:	89a3      	ldrh	r3, [r4, #12]
 8002386:	059a      	lsls	r2, r3, #22
 8002388:	d41d      	bmi.n	80023c6 <__smakebuf_r+0x92>
 800238a:	f043 0302 	orr.w	r3, r3, #2
 800238e:	81a3      	strh	r3, [r4, #12]
 8002390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	6123      	str	r3, [r4, #16]
 8002398:	2301      	movs	r3, #1
 800239a:	6163      	str	r3, [r4, #20]
 800239c:	e013      	b.n	80023c6 <__smakebuf_r+0x92>
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <__smakebuf_r+0x98>)
 80023a0:	62ab      	str	r3, [r5, #40]	; 0x28
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	6020      	str	r0, [r4, #0]
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	81a3      	strh	r3, [r4, #12]
 80023ac:	6120      	str	r0, [r4, #16]
 80023ae:	6166      	str	r6, [r4, #20]
 80023b0:	b14f      	cbz	r7, 80023c6 <__smakebuf_r+0x92>
 80023b2:	4628      	mov	r0, r5
 80023b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023b8:	f000 fad6 	bl	8002968 <_isatty_r>
 80023bc:	b118      	cbz	r0, 80023c6 <__smakebuf_r+0x92>
 80023be:	89a3      	ldrh	r3, [r4, #12]
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	b011      	add	sp, #68	; 0x44
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	080021b9 	.word	0x080021b9

080023d0 <memchr>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	b2c9      	uxtb	r1, r1
 80023d4:	4402      	add	r2, r0
 80023d6:	4290      	cmp	r0, r2
 80023d8:	4603      	mov	r3, r0
 80023da:	d006      	beq.n	80023ea <memchr+0x1a>
 80023dc:	781c      	ldrb	r4, [r3, #0]
 80023de:	428c      	cmp	r4, r1
 80023e0:	f100 0001 	add.w	r0, r0, #1
 80023e4:	d1f7      	bne.n	80023d6 <memchr+0x6>
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd10      	pop	{r4, pc}
 80023ea:	2000      	movs	r0, #0
 80023ec:	bd10      	pop	{r4, pc}

080023ee <memcpy>:
 80023ee:	b510      	push	{r4, lr}
 80023f0:	2300      	movs	r3, #0
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d003      	beq.n	80023fe <memcpy+0x10>
 80023f6:	5ccc      	ldrb	r4, [r1, r3]
 80023f8:	54c4      	strb	r4, [r0, r3]
 80023fa:	3301      	adds	r3, #1
 80023fc:	e7f9      	b.n	80023f2 <memcpy+0x4>
 80023fe:	bd10      	pop	{r4, pc}

08002400 <memmove>:
 8002400:	4281      	cmp	r1, r0
 8002402:	b570      	push	{r4, r5, r6, lr}
 8002404:	d301      	bcc.n	800240a <memmove+0xa>
 8002406:	2300      	movs	r3, #0
 8002408:	e00e      	b.n	8002428 <memmove+0x28>
 800240a:	188c      	adds	r4, r1, r2
 800240c:	42a0      	cmp	r0, r4
 800240e:	d2fa      	bcs.n	8002406 <memmove+0x6>
 8002410:	1885      	adds	r5, r0, r2
 8002412:	4613      	mov	r3, r2
 8002414:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002418:	d305      	bcc.n	8002426 <memmove+0x26>
 800241a:	4251      	negs	r1, r2
 800241c:	1866      	adds	r6, r4, r1
 800241e:	4429      	add	r1, r5
 8002420:	5cf6      	ldrb	r6, [r6, r3]
 8002422:	54ce      	strb	r6, [r1, r3]
 8002424:	e7f6      	b.n	8002414 <memmove+0x14>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <memmove+0x34>
 800242c:	5ccc      	ldrb	r4, [r1, r3]
 800242e:	54c4      	strb	r4, [r0, r3]
 8002430:	3301      	adds	r3, #1
 8002432:	e7f9      	b.n	8002428 <memmove+0x28>
 8002434:	bd70      	pop	{r4, r5, r6, pc}
	...

08002438 <_free_r>:
 8002438:	b530      	push	{r4, r5, lr}
 800243a:	2900      	cmp	r1, #0
 800243c:	d03c      	beq.n	80024b8 <_free_r+0x80>
 800243e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8002442:	1f0b      	subs	r3, r1, #4
 8002444:	491d      	ldr	r1, [pc, #116]	; (80024bc <_free_r+0x84>)
 8002446:	2a00      	cmp	r2, #0
 8002448:	bfb8      	it	lt
 800244a:	189b      	addlt	r3, r3, r2
 800244c:	680a      	ldr	r2, [r1, #0]
 800244e:	460c      	mov	r4, r1
 8002450:	b912      	cbnz	r2, 8002458 <_free_r+0x20>
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	600b      	str	r3, [r1, #0]
 8002456:	bd30      	pop	{r4, r5, pc}
 8002458:	4293      	cmp	r3, r2
 800245a:	d20d      	bcs.n	8002478 <_free_r+0x40>
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	1858      	adds	r0, r3, r1
 8002460:	4290      	cmp	r0, r2
 8002462:	d103      	bne.n	800246c <_free_r+0x34>
 8002464:	585a      	ldr	r2, [r3, r1]
 8002466:	4411      	add	r1, r2
 8002468:	6842      	ldr	r2, [r0, #4]
 800246a:	6019      	str	r1, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	6023      	str	r3, [r4, #0]
 8002470:	bd30      	pop	{r4, r5, pc}
 8002472:	4299      	cmp	r1, r3
 8002474:	d803      	bhi.n	800247e <_free_r+0x46>
 8002476:	460a      	mov	r2, r1
 8002478:	6851      	ldr	r1, [r2, #4]
 800247a:	2900      	cmp	r1, #0
 800247c:	d1f9      	bne.n	8002472 <_free_r+0x3a>
 800247e:	6814      	ldr	r4, [r2, #0]
 8002480:	1915      	adds	r5, r2, r4
 8002482:	429d      	cmp	r5, r3
 8002484:	d10a      	bne.n	800249c <_free_r+0x64>
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4423      	add	r3, r4
 800248a:	18d0      	adds	r0, r2, r3
 800248c:	4288      	cmp	r0, r1
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	d112      	bne.n	80024b8 <_free_r+0x80>
 8002492:	6808      	ldr	r0, [r1, #0]
 8002494:	4403      	add	r3, r0
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	684b      	ldr	r3, [r1, #4]
 800249a:	e00c      	b.n	80024b6 <_free_r+0x7e>
 800249c:	d902      	bls.n	80024a4 <_free_r+0x6c>
 800249e:	230c      	movs	r3, #12
 80024a0:	6003      	str	r3, [r0, #0]
 80024a2:	bd30      	pop	{r4, r5, pc}
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	181c      	adds	r4, r3, r0
 80024a8:	428c      	cmp	r4, r1
 80024aa:	d103      	bne.n	80024b4 <_free_r+0x7c>
 80024ac:	680c      	ldr	r4, [r1, #0]
 80024ae:	6849      	ldr	r1, [r1, #4]
 80024b0:	4420      	add	r0, r4
 80024b2:	6018      	str	r0, [r3, #0]
 80024b4:	6059      	str	r1, [r3, #4]
 80024b6:	6053      	str	r3, [r2, #4]
 80024b8:	bd30      	pop	{r4, r5, pc}
 80024ba:	bf00      	nop
 80024bc:	20000100 	.word	0x20000100

080024c0 <_malloc_r>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	1ccd      	adds	r5, r1, #3
 80024c4:	f025 0503 	bic.w	r5, r5, #3
 80024c8:	3508      	adds	r5, #8
 80024ca:	2d0c      	cmp	r5, #12
 80024cc:	bf38      	it	cc
 80024ce:	250c      	movcc	r5, #12
 80024d0:	2d00      	cmp	r5, #0
 80024d2:	4606      	mov	r6, r0
 80024d4:	db3f      	blt.n	8002556 <_malloc_r+0x96>
 80024d6:	428d      	cmp	r5, r1
 80024d8:	d33d      	bcc.n	8002556 <_malloc_r+0x96>
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <_malloc_r+0xa0>)
 80024dc:	681c      	ldr	r4, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	4621      	mov	r1, r4
 80024e2:	b1a1      	cbz	r1, 800250e <_malloc_r+0x4e>
 80024e4:	680b      	ldr	r3, [r1, #0]
 80024e6:	1b5b      	subs	r3, r3, r5
 80024e8:	d40e      	bmi.n	8002508 <_malloc_r+0x48>
 80024ea:	2b0b      	cmp	r3, #11
 80024ec:	d903      	bls.n	80024f6 <_malloc_r+0x36>
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	18cc      	adds	r4, r1, r3
 80024f2:	50cd      	str	r5, [r1, r3]
 80024f4:	e01f      	b.n	8002536 <_malloc_r+0x76>
 80024f6:	428c      	cmp	r4, r1
 80024f8:	d102      	bne.n	8002500 <_malloc_r+0x40>
 80024fa:	6862      	ldr	r2, [r4, #4]
 80024fc:	6002      	str	r2, [r0, #0]
 80024fe:	e01a      	b.n	8002536 <_malloc_r+0x76>
 8002500:	684b      	ldr	r3, [r1, #4]
 8002502:	6063      	str	r3, [r4, #4]
 8002504:	460c      	mov	r4, r1
 8002506:	e016      	b.n	8002536 <_malloc_r+0x76>
 8002508:	460c      	mov	r4, r1
 800250a:	6849      	ldr	r1, [r1, #4]
 800250c:	e7e9      	b.n	80024e2 <_malloc_r+0x22>
 800250e:	4c15      	ldr	r4, [pc, #84]	; (8002564 <_malloc_r+0xa4>)
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	b91b      	cbnz	r3, 800251c <_malloc_r+0x5c>
 8002514:	4630      	mov	r0, r6
 8002516:	f000 f84d 	bl	80025b4 <_sbrk_r>
 800251a:	6020      	str	r0, [r4, #0]
 800251c:	4629      	mov	r1, r5
 800251e:	4630      	mov	r0, r6
 8002520:	f000 f848 	bl	80025b4 <_sbrk_r>
 8002524:	1c43      	adds	r3, r0, #1
 8002526:	4601      	mov	r1, r0
 8002528:	d015      	beq.n	8002556 <_malloc_r+0x96>
 800252a:	1cc4      	adds	r4, r0, #3
 800252c:	f024 0403 	bic.w	r4, r4, #3
 8002530:	4284      	cmp	r4, r0
 8002532:	d10a      	bne.n	800254a <_malloc_r+0x8a>
 8002534:	6025      	str	r5, [r4, #0]
 8002536:	f104 000b 	add.w	r0, r4, #11
 800253a:	1d23      	adds	r3, r4, #4
 800253c:	f020 0007 	bic.w	r0, r0, #7
 8002540:	1ac3      	subs	r3, r0, r3
 8002542:	d00b      	beq.n	800255c <_malloc_r+0x9c>
 8002544:	425a      	negs	r2, r3
 8002546:	50e2      	str	r2, [r4, r3]
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	4630      	mov	r0, r6
 800254c:	1a61      	subs	r1, r4, r1
 800254e:	f000 f831 	bl	80025b4 <_sbrk_r>
 8002552:	3001      	adds	r0, #1
 8002554:	d1ee      	bne.n	8002534 <_malloc_r+0x74>
 8002556:	230c      	movs	r3, #12
 8002558:	6033      	str	r3, [r6, #0]
 800255a:	2000      	movs	r0, #0
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	bf00      	nop
 8002560:	20000100 	.word	0x20000100
 8002564:	200000fc 	.word	0x200000fc

08002568 <_realloc_r>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	4606      	mov	r6, r0
 800256c:	4614      	mov	r4, r2
 800256e:	460d      	mov	r5, r1
 8002570:	b921      	cbnz	r1, 800257c <_realloc_r+0x14>
 8002572:	4611      	mov	r1, r2
 8002574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002578:	f7ff bfa2 	b.w	80024c0 <_malloc_r>
 800257c:	b91a      	cbnz	r2, 8002586 <_realloc_r+0x1e>
 800257e:	f7ff ff5b 	bl	8002438 <_free_r>
 8002582:	4620      	mov	r0, r4
 8002584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002586:	f000 fa11 	bl	80029ac <_malloc_usable_size_r>
 800258a:	42a0      	cmp	r0, r4
 800258c:	d20e      	bcs.n	80025ac <_realloc_r+0x44>
 800258e:	4630      	mov	r0, r6
 8002590:	4621      	mov	r1, r4
 8002592:	f7ff ff95 	bl	80024c0 <_malloc_r>
 8002596:	4607      	mov	r7, r0
 8002598:	b150      	cbz	r0, 80025b0 <_realloc_r+0x48>
 800259a:	4629      	mov	r1, r5
 800259c:	4622      	mov	r2, r4
 800259e:	f7ff ff26 	bl	80023ee <memcpy>
 80025a2:	4630      	mov	r0, r6
 80025a4:	4629      	mov	r1, r5
 80025a6:	f7ff ff47 	bl	8002438 <_free_r>
 80025aa:	e001      	b.n	80025b0 <_realloc_r+0x48>
 80025ac:	4628      	mov	r0, r5
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	4638      	mov	r0, r7
 80025b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025b4 <_sbrk_r>:
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	4c06      	ldr	r4, [pc, #24]	; (80025d0 <_sbrk_r+0x1c>)
 80025b8:	2300      	movs	r3, #0
 80025ba:	4605      	mov	r5, r0
 80025bc:	4608      	mov	r0, r1
 80025be:	6023      	str	r3, [r4, #0]
 80025c0:	f000 fa38 	bl	8002a34 <_sbrk>
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d102      	bne.n	80025ce <_sbrk_r+0x1a>
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	b103      	cbz	r3, 80025ce <_sbrk_r+0x1a>
 80025cc:	602b      	str	r3, [r5, #0]
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
 80025d0:	20000144 	.word	0x20000144

080025d4 <__sread>:
 80025d4:	b510      	push	{r4, lr}
 80025d6:	460c      	mov	r4, r1
 80025d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025dc:	f000 f9f0 	bl	80029c0 <_read_r>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	db03      	blt.n	80025ec <__sread+0x18>
 80025e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025e6:	4403      	add	r3, r0
 80025e8:	6563      	str	r3, [r4, #84]	; 0x54
 80025ea:	bd10      	pop	{r4, pc}
 80025ec:	89a3      	ldrh	r3, [r4, #12]
 80025ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025f2:	81a3      	strh	r3, [r4, #12]
 80025f4:	bd10      	pop	{r4, pc}

080025f6 <__swrite>:
 80025f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fa:	461d      	mov	r5, r3
 80025fc:	898b      	ldrh	r3, [r1, #12]
 80025fe:	05db      	lsls	r3, r3, #23
 8002600:	4607      	mov	r7, r0
 8002602:	460c      	mov	r4, r1
 8002604:	4616      	mov	r6, r2
 8002606:	d505      	bpl.n	8002614 <__swrite+0x1e>
 8002608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260c:	2200      	movs	r2, #0
 800260e:	2302      	movs	r3, #2
 8002610:	f000 f9ba 	bl	8002988 <_lseek_r>
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800261a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800261e:	81a3      	strh	r3, [r4, #12]
 8002620:	4638      	mov	r0, r7
 8002622:	4632      	mov	r2, r6
 8002624:	462b      	mov	r3, r5
 8002626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800262a:	f000 b969 	b.w	8002900 <_write_r>

0800262e <__sseek>:
 800262e:	b510      	push	{r4, lr}
 8002630:	460c      	mov	r4, r1
 8002632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002636:	f000 f9a7 	bl	8002988 <_lseek_r>
 800263a:	1c43      	adds	r3, r0, #1
 800263c:	89a3      	ldrh	r3, [r4, #12]
 800263e:	d103      	bne.n	8002648 <__sseek+0x1a>
 8002640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002644:	81a3      	strh	r3, [r4, #12]
 8002646:	bd10      	pop	{r4, pc}
 8002648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800264c:	81a3      	strh	r3, [r4, #12]
 800264e:	6560      	str	r0, [r4, #84]	; 0x54
 8002650:	bd10      	pop	{r4, pc}

08002652 <__sclose>:
 8002652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002656:	f000 b965 	b.w	8002924 <_close_r>

0800265a <strlen>:
 800265a:	4603      	mov	r3, r0
 800265c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002660:	2a00      	cmp	r2, #0
 8002662:	d1fb      	bne.n	800265c <strlen+0x2>
 8002664:	1a18      	subs	r0, r3, r0
 8002666:	3801      	subs	r0, #1
 8002668:	4770      	bx	lr

0800266a <__ssputs_r>:
 800266a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800266e:	688d      	ldr	r5, [r1, #8]
 8002670:	42ab      	cmp	r3, r5
 8002672:	4681      	mov	r9, r0
 8002674:	460c      	mov	r4, r1
 8002676:	4692      	mov	sl, r2
 8002678:	461f      	mov	r7, r3
 800267a:	d343      	bcc.n	8002704 <__ssputs_r+0x9a>
 800267c:	898b      	ldrh	r3, [r1, #12]
 800267e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8002682:	d03d      	beq.n	8002700 <__ssputs_r+0x96>
 8002684:	6826      	ldr	r6, [r4, #0]
 8002686:	6909      	ldr	r1, [r1, #16]
 8002688:	ebc1 0806 	rsb	r8, r1, r6
 800268c:	6966      	ldr	r6, [r4, #20]
 800268e:	2202      	movs	r2, #2
 8002690:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8002694:	fb96 f6f2 	sdiv	r6, r6, r2
 8002698:	f108 0201 	add.w	r2, r8, #1
 800269c:	443a      	add	r2, r7
 800269e:	4296      	cmp	r6, r2
 80026a0:	bf38      	it	cc
 80026a2:	4616      	movcc	r6, r2
 80026a4:	055b      	lsls	r3, r3, #21
 80026a6:	d50f      	bpl.n	80026c8 <__ssputs_r+0x5e>
 80026a8:	4631      	mov	r1, r6
 80026aa:	f7ff ff09 	bl	80024c0 <_malloc_r>
 80026ae:	4605      	mov	r5, r0
 80026b0:	b198      	cbz	r0, 80026da <__ssputs_r+0x70>
 80026b2:	6921      	ldr	r1, [r4, #16]
 80026b4:	4642      	mov	r2, r8
 80026b6:	f7ff fe9a 	bl	80023ee <memcpy>
 80026ba:	89a3      	ldrh	r3, [r4, #12]
 80026bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	81a3      	strh	r3, [r4, #12]
 80026c6:	e013      	b.n	80026f0 <__ssputs_r+0x86>
 80026c8:	4632      	mov	r2, r6
 80026ca:	f7ff ff4d 	bl	8002568 <_realloc_r>
 80026ce:	4605      	mov	r5, r0
 80026d0:	b970      	cbnz	r0, 80026f0 <__ssputs_r+0x86>
 80026d2:	4648      	mov	r0, r9
 80026d4:	6921      	ldr	r1, [r4, #16]
 80026d6:	f7ff feaf 	bl	8002438 <_free_r>
 80026da:	230c      	movs	r3, #12
 80026dc:	f8c9 3000 	str.w	r3, [r9]
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e6:	81a3      	strh	r3, [r4, #12]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f0:	6125      	str	r5, [r4, #16]
 80026f2:	6166      	str	r6, [r4, #20]
 80026f4:	4445      	add	r5, r8
 80026f6:	ebc8 0606 	rsb	r6, r8, r6
 80026fa:	6025      	str	r5, [r4, #0]
 80026fc:	60a6      	str	r6, [r4, #8]
 80026fe:	463d      	mov	r5, r7
 8002700:	42af      	cmp	r7, r5
 8002702:	d200      	bcs.n	8002706 <__ssputs_r+0x9c>
 8002704:	463d      	mov	r5, r7
 8002706:	462a      	mov	r2, r5
 8002708:	6820      	ldr	r0, [r4, #0]
 800270a:	4651      	mov	r1, sl
 800270c:	f7ff fe78 	bl	8002400 <memmove>
 8002710:	68a3      	ldr	r3, [r4, #8]
 8002712:	1b5b      	subs	r3, r3, r5
 8002714:	60a3      	str	r3, [r4, #8]
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	441d      	add	r5, r3
 800271a:	6025      	str	r5, [r4, #0]
 800271c:	2000      	movs	r0, #0
 800271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002724 <_svfiprintf_r>:
 8002724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002728:	b09d      	sub	sp, #116	; 0x74
 800272a:	4607      	mov	r7, r0
 800272c:	9303      	str	r3, [sp, #12]
 800272e:	898b      	ldrh	r3, [r1, #12]
 8002730:	061c      	lsls	r4, r3, #24
 8002732:	460d      	mov	r5, r1
 8002734:	4616      	mov	r6, r2
 8002736:	d50c      	bpl.n	8002752 <_svfiprintf_r+0x2e>
 8002738:	690b      	ldr	r3, [r1, #16]
 800273a:	b953      	cbnz	r3, 8002752 <_svfiprintf_r+0x2e>
 800273c:	2140      	movs	r1, #64	; 0x40
 800273e:	f7ff febf 	bl	80024c0 <_malloc_r>
 8002742:	6028      	str	r0, [r5, #0]
 8002744:	6128      	str	r0, [r5, #16]
 8002746:	b910      	cbnz	r0, 800274e <_svfiprintf_r+0x2a>
 8002748:	230c      	movs	r3, #12
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	e0c8      	b.n	80028e0 <_svfiprintf_r+0x1bc>
 800274e:	2340      	movs	r3, #64	; 0x40
 8002750:	616b      	str	r3, [r5, #20]
 8002752:	2300      	movs	r3, #0
 8002754:	9309      	str	r3, [sp, #36]	; 0x24
 8002756:	2320      	movs	r3, #32
 8002758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800275c:	2330      	movs	r3, #48	; 0x30
 800275e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002762:	4633      	mov	r3, r6
 8002764:	461c      	mov	r4, r3
 8002766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800276a:	b91a      	cbnz	r2, 8002774 <_svfiprintf_r+0x50>
 800276c:	ebb4 0906 	subs.w	r9, r4, r6
 8002770:	d00f      	beq.n	8002792 <_svfiprintf_r+0x6e>
 8002772:	e002      	b.n	800277a <_svfiprintf_r+0x56>
 8002774:	2a25      	cmp	r2, #37	; 0x25
 8002776:	d1f5      	bne.n	8002764 <_svfiprintf_r+0x40>
 8002778:	e7f8      	b.n	800276c <_svfiprintf_r+0x48>
 800277a:	4638      	mov	r0, r7
 800277c:	4629      	mov	r1, r5
 800277e:	4632      	mov	r2, r6
 8002780:	464b      	mov	r3, r9
 8002782:	f7ff ff72 	bl	800266a <__ssputs_r>
 8002786:	3001      	adds	r0, #1
 8002788:	f000 80a5 	beq.w	80028d6 <_svfiprintf_r+0x1b2>
 800278c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800278e:	444b      	add	r3, r9
 8002790:	9309      	str	r3, [sp, #36]	; 0x24
 8002792:	7823      	ldrb	r3, [r4, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 809e 	beq.w	80028d6 <_svfiprintf_r+0x1b2>
 800279a:	2300      	movs	r3, #0
 800279c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a0:	9304      	str	r3, [sp, #16]
 80027a2:	9307      	str	r3, [sp, #28]
 80027a4:	9205      	str	r2, [sp, #20]
 80027a6:	9306      	str	r3, [sp, #24]
 80027a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027ac:	931a      	str	r3, [sp, #104]	; 0x68
 80027ae:	f104 0901 	add.w	r9, r4, #1
 80027b2:	464c      	mov	r4, r9
 80027b4:	4e4d      	ldr	r6, [pc, #308]	; (80028ec <_svfiprintf_r+0x1c8>)
 80027b6:	7821      	ldrb	r1, [r4, #0]
 80027b8:	4630      	mov	r0, r6
 80027ba:	2205      	movs	r2, #5
 80027bc:	f7ff fe08 	bl	80023d0 <memchr>
 80027c0:	f109 0901 	add.w	r9, r9, #1
 80027c4:	9b04      	ldr	r3, [sp, #16]
 80027c6:	b128      	cbz	r0, 80027d4 <_svfiprintf_r+0xb0>
 80027c8:	1b86      	subs	r6, r0, r6
 80027ca:	2001      	movs	r0, #1
 80027cc:	40b0      	lsls	r0, r6
 80027ce:	4303      	orrs	r3, r0
 80027d0:	9304      	str	r3, [sp, #16]
 80027d2:	e7ee      	b.n	80027b2 <_svfiprintf_r+0x8e>
 80027d4:	06d9      	lsls	r1, r3, #27
 80027d6:	bf44      	itt	mi
 80027d8:	2220      	movmi	r2, #32
 80027da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80027de:	071a      	lsls	r2, r3, #28
 80027e0:	bf44      	itt	mi
 80027e2:	222b      	movmi	r2, #43	; 0x2b
 80027e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80027e8:	7822      	ldrb	r2, [r4, #0]
 80027ea:	2a2a      	cmp	r2, #42	; 0x2a
 80027ec:	d002      	beq.n	80027f4 <_svfiprintf_r+0xd0>
 80027ee:	9b07      	ldr	r3, [sp, #28]
 80027f0:	4621      	mov	r1, r4
 80027f2:	e00e      	b.n	8002812 <_svfiprintf_r+0xee>
 80027f4:	9a03      	ldr	r2, [sp, #12]
 80027f6:	1d11      	adds	r1, r2, #4
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	9103      	str	r1, [sp, #12]
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	db01      	blt.n	8002804 <_svfiprintf_r+0xe0>
 8002800:	9207      	str	r2, [sp, #28]
 8002802:	e004      	b.n	800280e <_svfiprintf_r+0xea>
 8002804:	4252      	negs	r2, r2
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	9207      	str	r2, [sp, #28]
 800280c:	9304      	str	r3, [sp, #16]
 800280e:	3401      	adds	r4, #1
 8002810:	e00a      	b.n	8002828 <_svfiprintf_r+0x104>
 8002812:	460c      	mov	r4, r1
 8002814:	3101      	adds	r1, #1
 8002816:	7822      	ldrb	r2, [r4, #0]
 8002818:	3a30      	subs	r2, #48	; 0x30
 800281a:	2a09      	cmp	r2, #9
 800281c:	d803      	bhi.n	8002826 <_svfiprintf_r+0x102>
 800281e:	200a      	movs	r0, #10
 8002820:	fb00 2303 	mla	r3, r0, r3, r2
 8002824:	e7f5      	b.n	8002812 <_svfiprintf_r+0xee>
 8002826:	9307      	str	r3, [sp, #28]
 8002828:	7823      	ldrb	r3, [r4, #0]
 800282a:	2b2e      	cmp	r3, #46	; 0x2e
 800282c:	d11a      	bne.n	8002864 <_svfiprintf_r+0x140>
 800282e:	7863      	ldrb	r3, [r4, #1]
 8002830:	2b2a      	cmp	r3, #42	; 0x2a
 8002832:	d10a      	bne.n	800284a <_svfiprintf_r+0x126>
 8002834:	9b03      	ldr	r3, [sp, #12]
 8002836:	1d1a      	adds	r2, r3, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	9203      	str	r2, [sp, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f104 0402 	add.w	r4, r4, #2
 8002842:	bfb8      	it	lt
 8002844:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002848:	e00b      	b.n	8002862 <_svfiprintf_r+0x13e>
 800284a:	1c61      	adds	r1, r4, #1
 800284c:	2300      	movs	r3, #0
 800284e:	460c      	mov	r4, r1
 8002850:	3101      	adds	r1, #1
 8002852:	7822      	ldrb	r2, [r4, #0]
 8002854:	3a30      	subs	r2, #48	; 0x30
 8002856:	2a09      	cmp	r2, #9
 8002858:	d803      	bhi.n	8002862 <_svfiprintf_r+0x13e>
 800285a:	200a      	movs	r0, #10
 800285c:	fb00 2303 	mla	r3, r0, r3, r2
 8002860:	e7f5      	b.n	800284e <_svfiprintf_r+0x12a>
 8002862:	9305      	str	r3, [sp, #20]
 8002864:	4e22      	ldr	r6, [pc, #136]	; (80028f0 <_svfiprintf_r+0x1cc>)
 8002866:	7821      	ldrb	r1, [r4, #0]
 8002868:	4630      	mov	r0, r6
 800286a:	2203      	movs	r2, #3
 800286c:	f7ff fdb0 	bl	80023d0 <memchr>
 8002870:	b130      	cbz	r0, 8002880 <_svfiprintf_r+0x15c>
 8002872:	1b86      	subs	r6, r0, r6
 8002874:	9b04      	ldr	r3, [sp, #16]
 8002876:	2040      	movs	r0, #64	; 0x40
 8002878:	40b0      	lsls	r0, r6
 800287a:	4303      	orrs	r3, r0
 800287c:	9304      	str	r3, [sp, #16]
 800287e:	3401      	adds	r4, #1
 8002880:	7821      	ldrb	r1, [r4, #0]
 8002882:	481c      	ldr	r0, [pc, #112]	; (80028f4 <_svfiprintf_r+0x1d0>)
 8002884:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002888:	2206      	movs	r2, #6
 800288a:	1c66      	adds	r6, r4, #1
 800288c:	f7ff fda0 	bl	80023d0 <memchr>
 8002890:	b188      	cbz	r0, 80028b6 <_svfiprintf_r+0x192>
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <_svfiprintf_r+0x1d4>)
 8002894:	b933      	cbnz	r3, 80028a4 <_svfiprintf_r+0x180>
 8002896:	9b03      	ldr	r3, [sp, #12]
 8002898:	3307      	adds	r3, #7
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	3308      	adds	r3, #8
 80028a0:	9303      	str	r3, [sp, #12]
 80028a2:	e014      	b.n	80028ce <_svfiprintf_r+0x1aa>
 80028a4:	ab03      	add	r3, sp, #12
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4638      	mov	r0, r7
 80028aa:	a904      	add	r1, sp, #16
 80028ac:	462a      	mov	r2, r5
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_svfiprintf_r+0x1d8>)
 80028b0:	f3af 8000 	nop.w
 80028b4:	e007      	b.n	80028c6 <_svfiprintf_r+0x1a2>
 80028b6:	ab03      	add	r3, sp, #12
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4638      	mov	r0, r7
 80028bc:	a904      	add	r1, sp, #16
 80028be:	462a      	mov	r2, r5
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <_svfiprintf_r+0x1d8>)
 80028c2:	f7ff f9cf 	bl	8001c64 <_printf_i>
 80028c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80028ca:	4680      	mov	r8, r0
 80028cc:	d003      	beq.n	80028d6 <_svfiprintf_r+0x1b2>
 80028ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028d0:	4443      	add	r3, r8
 80028d2:	9309      	str	r3, [sp, #36]	; 0x24
 80028d4:	e745      	b.n	8002762 <_svfiprintf_r+0x3e>
 80028d6:	89ab      	ldrh	r3, [r5, #12]
 80028d8:	065b      	lsls	r3, r3, #25
 80028da:	d401      	bmi.n	80028e0 <_svfiprintf_r+0x1bc>
 80028dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028de:	e001      	b.n	80028e4 <_svfiprintf_r+0x1c0>
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	b01d      	add	sp, #116	; 0x74
 80028e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028ea:	bf00      	nop
 80028ec:	08002cb4 	.word	0x08002cb4
 80028f0:	08002cba 	.word	0x08002cba
 80028f4:	08002cbe 	.word	0x08002cbe
 80028f8:	00000000 	.word	0x00000000
 80028fc:	0800266b 	.word	0x0800266b

08002900 <_write_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4c07      	ldr	r4, [pc, #28]	; (8002920 <_write_r+0x20>)
 8002904:	4605      	mov	r5, r0
 8002906:	2000      	movs	r0, #0
 8002908:	6020      	str	r0, [r4, #0]
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f8aa 	bl	8002a68 <_write>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d102      	bne.n	800291e <_write_r+0x1e>
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	b103      	cbz	r3, 800291e <_write_r+0x1e>
 800291c:	602b      	str	r3, [r5, #0]
 800291e:	bd38      	pop	{r3, r4, r5, pc}
 8002920:	20000144 	.word	0x20000144

08002924 <_close_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4c06      	ldr	r4, [pc, #24]	; (8002940 <_close_r+0x1c>)
 8002928:	2300      	movs	r3, #0
 800292a:	4605      	mov	r5, r0
 800292c:	4608      	mov	r0, r1
 800292e:	6023      	str	r3, [r4, #0]
 8002930:	f000 f858 	bl	80029e4 <_close>
 8002934:	1c43      	adds	r3, r0, #1
 8002936:	d102      	bne.n	800293e <_close_r+0x1a>
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	b103      	cbz	r3, 800293e <_close_r+0x1a>
 800293c:	602b      	str	r3, [r5, #0]
 800293e:	bd38      	pop	{r3, r4, r5, pc}
 8002940:	20000144 	.word	0x20000144

08002944 <_fstat_r>:
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	4c07      	ldr	r4, [pc, #28]	; (8002964 <_fstat_r+0x20>)
 8002948:	2300      	movs	r3, #0
 800294a:	4605      	mov	r5, r0
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	f000 f84f 	bl	80029f4 <_fstat>
 8002956:	1c43      	adds	r3, r0, #1
 8002958:	d102      	bne.n	8002960 <_fstat_r+0x1c>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	b103      	cbz	r3, 8002960 <_fstat_r+0x1c>
 800295e:	602b      	str	r3, [r5, #0]
 8002960:	bd38      	pop	{r3, r4, r5, pc}
 8002962:	bf00      	nop
 8002964:	20000144 	.word	0x20000144

08002968 <_isatty_r>:
 8002968:	b538      	push	{r3, r4, r5, lr}
 800296a:	4c06      	ldr	r4, [pc, #24]	; (8002984 <_isatty_r+0x1c>)
 800296c:	2300      	movs	r3, #0
 800296e:	4605      	mov	r5, r0
 8002970:	4608      	mov	r0, r1
 8002972:	6023      	str	r3, [r4, #0]
 8002974:	f000 f846 	bl	8002a04 <_isatty>
 8002978:	1c43      	adds	r3, r0, #1
 800297a:	d102      	bne.n	8002982 <_isatty_r+0x1a>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	b103      	cbz	r3, 8002982 <_isatty_r+0x1a>
 8002980:	602b      	str	r3, [r5, #0]
 8002982:	bd38      	pop	{r3, r4, r5, pc}
 8002984:	20000144 	.word	0x20000144

08002988 <_lseek_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	4c07      	ldr	r4, [pc, #28]	; (80029a8 <_lseek_r+0x20>)
 800298c:	4605      	mov	r5, r0
 800298e:	2000      	movs	r0, #0
 8002990:	6020      	str	r0, [r4, #0]
 8002992:	4608      	mov	r0, r1
 8002994:	4611      	mov	r1, r2
 8002996:	461a      	mov	r2, r3
 8002998:	f000 f83c 	bl	8002a14 <_lseek>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_lseek_r+0x1e>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_lseek_r+0x1e>
 80029a4:	602b      	str	r3, [r5, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	20000144 	.word	0x20000144

080029ac <_malloc_usable_size_r>:
 80029ac:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80029b0:	2800      	cmp	r0, #0
 80029b2:	da02      	bge.n	80029ba <_malloc_usable_size_r+0xe>
 80029b4:	3904      	subs	r1, #4
 80029b6:	580b      	ldr	r3, [r1, r0]
 80029b8:	4418      	add	r0, r3
 80029ba:	3804      	subs	r0, #4
 80029bc:	4770      	bx	lr
	...

080029c0 <_read_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4c07      	ldr	r4, [pc, #28]	; (80029e0 <_read_r+0x20>)
 80029c4:	4605      	mov	r5, r0
 80029c6:	2000      	movs	r0, #0
 80029c8:	6020      	str	r0, [r4, #0]
 80029ca:	4608      	mov	r0, r1
 80029cc:	4611      	mov	r1, r2
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 f828 	bl	8002a24 <_read>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d102      	bne.n	80029de <_read_r+0x1e>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	b103      	cbz	r3, 80029de <_read_r+0x1e>
 80029dc:	602b      	str	r3, [r5, #0]
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	20000144 	.word	0x20000144

080029e4 <_close>:
 80029e4:	4b02      	ldr	r3, [pc, #8]	; (80029f0 <_close+0xc>)
 80029e6:	2258      	movs	r2, #88	; 0x58
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ee:	4770      	bx	lr
 80029f0:	20000144 	.word	0x20000144

080029f4 <_fstat>:
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <_fstat+0xc>)
 80029f6:	2258      	movs	r2, #88	; 0x58
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fe:	4770      	bx	lr
 8002a00:	20000144 	.word	0x20000144

08002a04 <_isatty>:
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <_isatty+0xc>)
 8002a06:	2258      	movs	r2, #88	; 0x58
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000144 	.word	0x20000144

08002a14 <_lseek>:
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <_lseek+0xc>)
 8002a16:	2258      	movs	r2, #88	; 0x58
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a1e:	4770      	bx	lr
 8002a20:	20000144 	.word	0x20000144

08002a24 <_read>:
 8002a24:	4b02      	ldr	r3, [pc, #8]	; (8002a30 <_read+0xc>)
 8002a26:	2258      	movs	r2, #88	; 0x58
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a2e:	4770      	bx	lr
 8002a30:	20000144 	.word	0x20000144

08002a34 <_sbrk>:
 8002a34:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <_sbrk+0x28>)
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	b163      	cbz	r3, 8002a54 <_sbrk+0x20>
 8002a3a:	4418      	add	r0, r3
 8002a3c:	4669      	mov	r1, sp
 8002a3e:	4288      	cmp	r0, r1
 8002a40:	d802      	bhi.n	8002a48 <_sbrk+0x14>
 8002a42:	6010      	str	r0, [r2, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	4770      	bx	lr
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <_sbrk+0x2c>)
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a52:	4770      	bx	lr
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <_sbrk+0x30>)
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e7ef      	b.n	8002a3a <_sbrk+0x6>
 8002a5a:	bf00      	nop
 8002a5c:	20000104 	.word	0x20000104
 8002a60:	20000144 	.word	0x20000144
 8002a64:	20000148 	.word	0x20000148

08002a68 <_write>:
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <_write+0xc>)
 8002a6a:	2258      	movs	r2, #88	; 0x58
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a72:	4770      	bx	lr
 8002a74:	20000144 	.word	0x20000144

08002a78 <crc16tab>:
 8002a78:	10210000 30632042 50a54084 70e760c6     ..!.B c0.@.P.`.p
 8002a88:	91298108 b16ba14a d1adc18c f1efe1ce     ..).J.k.........
 8002a98:	02101231 22523273 429452b5 62d672f7     1...s2R".R.B.r.b
 8002aa8:	83189339 a35ab37b c39cd3bd e3def3ff     9...{.Z.........
 8002ab8:	34432462 14010420 74c764e6 548544a4     b$C4 ....d.t.D.T
 8002ac8:	b54ba56a 95098528 f5cfe5ee d58dc5ac     j.K.(...........
 8002ad8:	26723653 06301611 66f676d7 46b45695     S6r&..0..v.f.V.F
 8002ae8:	a77ab75b 87389719 e7fef7df c7bcd79d     [.z...8.........
 8002af8:	58e548c4 78a76886 18610840 38232802     .H.X.h.x@.a..(#8
 8002b08:	d9edc9cc f9afe98e 99698948 b92ba90a     ........H.i...+.
 8002b18:	4ad45af5 6a967ab7 0a501a71 2a123a33     .Z.J.z.jq.P.3:.*
 8002b28:	cbdcdbfd eb9efbbf 8b589b79 ab1abb3b     ........y.X.;...
 8002b38:	7c876ca6 5cc54ce4 3c032c22 1c410c60     .l.|.L.\",.<`.A.
 8002b48:	fd8fedae ddcdcdec bd0bad2a 9d498d68     ........*...h.I.
 8002b58:	6eb67e97 4ef45ed5 2e323e13 0e701e51     .~.n.^.N.>2.Q.p.
 8002b68:	efbeff9f cffcdfdd af3abf1b 8f789f59     ..........:.Y.x.
 8002b78:	81a99188 a1ebb1ca c12dd10c e16ff14e     ..........-.N.o.
 8002b88:	00a11080 20e330c2 40255004 60677046     .....0. .P%@Fpg`
 8002b98:	939883b9 b3daa3fb d31cc33d f35ee37f     ........=.....^.
 8002ba8:	129002b1 32d222f3 52144235 72566277     .....".25B.RwbVr
 8002bb8:	a5cbb5ea 858995a8 e54ff56e c50dd52c     ........n.O.,...
 8002bc8:	24c334e2 048114a0 64477466 44055424     .4.$....ftGd$T.D
 8002bd8:	b7faa7db 97b88799 f77ee75f d73cc71d     ........_.~...<.
 8002be8:	36f226d3 16b00691 76766657 56344615     .&.6....Wfvv.F4V
 8002bf8:	c96dd94c e92ff90e 89e999c8 a9abb98a     L.m.../.........
 8002c08:	48655844 68277806 08e118c0 28a33882     DXeH.x'h.....8.(
 8002c18:	db5ccb7d fb1eeb3f 9bd88bf9 bb9aabbb     }.\.?...........
 8002c28:	5a544a75 7a166a37 1ad00af1 3a922ab3     uJTZ7j.z.....*.:
 8002c38:	ed0ffd2e cd4ddd6c ad8bbdaa 8dc99de8     ....l.M.........
 8002c48:	6c077c26 4c455c64 2c833ca2 0cc11ce0     &|.ld\EL.<.,....
 8002c58:	ff3eef1f df7ccf5d bfbaaf9b 9ff88fd9     ..>.].|.........
 8002c68:	7e366e17 5e744e55 3eb22e93 1ef00ed1     .n6~UNt^...>....
 8002c78:	78343025 00000000 0000002c 00006425     %04x....,...%d..
 8002c88:	6c6c6548 6f57206f 21646c72 20642520     Hello World! %d 
 8002c98:	25206425 63252064 00000d0a 20646d63     %d %d %c....cmd 
 8002ca8:	6e207369 2520776f 00000a64 2b302d23     is now %d...#-0+
 8002cb8:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
 8002cc8:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
 8002cd8:	35343332 39383736 64636261 00006665     23456789abcdef..

08002ce8 <__sf_fake_stdin>:
	...

08002d08 <__sf_fake_stdout>:
	...

08002d28 <__sf_fake_stderr>:
	...
 8002d48:	00000043                                C...

08002d4c <_global_impure_ptr>:
 8002d4c:	2000008c                                ... 
